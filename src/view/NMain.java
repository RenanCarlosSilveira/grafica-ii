/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import control.DesenhaObjetos;
import control.Matriz;
import java.awt.Dimension;
import java.awt.Graphics2D;
import static java.lang.Math.toRadians;
import static java.lang.Math.cos;
import static java.lang.Math.sin;
import javax.swing.JOptionPane;
import model.Guia;
import model.Linha;
import model.Poligono;
import model.Polilinha;
import model.Ponto;

/**
 *
 * @author renan
 */
public class NMain extends javax.swing.JFrame {

    /**
     * Creates new form NMain
     */
    Polilinha polilinha = new Polilinha();
    Poligono poligono = new Poligono();
    private int zoom = 0;
    //public WindowPort window;

    public NMain() {
        initComponents();
        painelPintura.setSize(new Dimension(700, 700));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painelFundo = new javax.swing.JPanel();
        seperaPainel = new javax.swing.JSeparator();
        Opcoes = new javax.swing.JTabbedPane();
        viewportsubpanel = new javax.swing.JPanel();
        vw_innerpanel1 = new javax.swing.JPanel();
        bAmpliaViewport = new javax.swing.JButton();
        bReduzViewport = new javax.swing.JButton();
        vw_innerpanel2 = new javax.swing.JPanel();
        bRotHorViewport = new javax.swing.JButton();
        bRotAntiViewport = new javax.swing.JButton();
        bLimpaViewport = new javax.swing.JButton();
        drawsubpanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        objList = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        obj_innerpanel1 = new javax.swing.JPanel();
        vlrMovObjX = new javax.swing.JTextField();
        MoverObj = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        vlrMovObjY = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        drw_innerpanel1 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        vlrZoomObjX = new javax.swing.JTextField();
        vlrZoomObjY = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        RedimensionarObj = new javax.swing.JButton();
        redimensionarsobreOrigem = new javax.swing.JCheckBox();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        redimensionarsobreCentro = new javax.swing.JCheckBox();
        drw_innerpanel2 = new javax.swing.JPanel();
        bAntiHorarioObjeto = new javax.swing.JButton();
        bHorarioObjeto = new javax.swing.JButton();
        vlrRotacObj = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        rotacionaemPonto = new javax.swing.JCheckBox();
        vlrXPontoRotacObj = new javax.swing.JTextField();
        vlrYPontoRotacObj = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        rotacionanoCentro = new javax.swing.JCheckBox();
        bRemoveObjeto = new javax.swing.JButton();
        operaMatriz = new javax.swing.JCheckBox();
        tool_inner = new javax.swing.JPanel();
        reflet_innerpanel = new javax.swing.JPanel();
        RefletirObj = new javax.swing.JButton();
        refletX = new javax.swing.JCheckBox();
        refletY = new javax.swing.JCheckBox();
        refletOrigem = new javax.swing.JCheckBox();
        cisalha_innerpanel = new javax.swing.JPanel();
        vlrAngCisalha = new javax.swing.JTextField();
        CisalharObj = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();
        cisalhaY = new javax.swing.JCheckBox();
        cisalhaX = new javax.swing.JCheckBox();
        matrixsubpanel = new javax.swing.JPanel();
        matrix_innerpanel1 = new javax.swing.JPanel();
        colEscalar = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        bEscalar = new javax.swing.JButton();
        linEscalar = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        vlrEscalar = new javax.swing.JTextField();
        matrix_innerpanel2 = new javax.swing.JPanel();
        linMultA = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        bMultiplica = new javax.swing.JButton();
        colMultA = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        linMultB = new javax.swing.JTextField();
        colMultB = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        matrix_innerpanel3 = new javax.swing.JPanel();
        linSoma = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        bSoma1 = new javax.swing.JButton();
        colSoma = new javax.swing.JTextField();
        bLimpaMatriz = new javax.swing.JButton();
        matrixScroll = new javax.swing.JScrollPane();
        resultMatrix = new javax.swing.JTextArea();
        bAcimaViewport = new javax.swing.JButton();
        bAbaixoViewport = new javax.swing.JButton();
        bDireitaViewport = new javax.swing.JButton();
        bEsquerdaViewport = new javax.swing.JButton();
        painelPintura = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        vZoom = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        topMenu = new javax.swing.JMenuBar();
        topMenuArquivo = new javax.swing.JMenu();
        itemAbrirLista = new javax.swing.JMenuItem();
        itemSalvarLista = new javax.swing.JMenuItem();
        itemFecharApp = new javax.swing.JMenuItem();
        topMenuDesenhar1 = new javax.swing.JMenu();
        itemMostraGuia = new javax.swing.JMenuItem();
        itemEscondeGuia = new javax.swing.JMenuItem();
        topMenuDesenhar = new javax.swing.JMenu();
        itemPonto = new javax.swing.JMenuItem();
        itemLinha = new javax.swing.JMenuItem();
        itemPolilinha = new javax.swing.JMenuItem();
        itemPoligono = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("TrueCAD - Renan e Lucas Brito");
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        setFont(new java.awt.Font("Times New Roman", 0, 10)); // NOI18N
        setIconImages(null);
        setLocation(new java.awt.Point(100, 100));
        setMaximizedBounds(new java.awt.Rectangle(1280, 900, 1280, 900));
        setMinimumSize(new java.awt.Dimension(1280, 900));
        setPreferredSize(new java.awt.Dimension(1280, 900));
        setResizable(false);

        painelFundo.setBackground(new java.awt.Color(255, 255, 255));
        painelFundo.setMaximumSize(new java.awt.Dimension(1280, 900));
        painelFundo.setMinimumSize(new java.awt.Dimension(1280, 900));
        painelFundo.setPreferredSize(new java.awt.Dimension(1280, 900));

        seperaPainel.setBackground(new java.awt.Color(0, 0, 0));
        seperaPainel.setForeground(new java.awt.Color(0, 0, 0));
        seperaPainel.setOrientation(javax.swing.SwingConstants.VERTICAL);

        Opcoes.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        Opcoes.setDoubleBuffered(true);
        Opcoes.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Opcoes.setMaximumSize(new java.awt.Dimension(288, 840));
        Opcoes.setMinimumSize(new java.awt.Dimension(288, 840));
        Opcoes.setPreferredSize(new java.awt.Dimension(288, 840));
        Opcoes.setRequestFocusEnabled(false);

        viewportsubpanel.setBackground(new java.awt.Color(255, 255, 255));
        viewportsubpanel.setMaximumSize(new java.awt.Dimension(267, 700));
        viewportsubpanel.setMinimumSize(new java.awt.Dimension(267, 700));
        viewportsubpanel.setPreferredSize(new java.awt.Dimension(267, 700));

        vw_innerpanel1.setBackground(new java.awt.Color(255, 255, 255));
        vw_innerpanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(0, 0, 0)), "Redimencionar", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        bAmpliaViewport.setBackground(new java.awt.Color(255, 255, 255));
        bAmpliaViewport.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        bAmpliaViewport.setText("Ampliar");
        bAmpliaViewport.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bAmpliaViewport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAmpliaViewportActionPerformed(evt);
            }
        });

        bReduzViewport.setBackground(new java.awt.Color(255, 255, 255));
        bReduzViewport.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        bReduzViewport.setText("Reduzir");
        bReduzViewport.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bReduzViewport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bReduzViewportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout vw_innerpanel1Layout = new javax.swing.GroupLayout(vw_innerpanel1);
        vw_innerpanel1.setLayout(vw_innerpanel1Layout);
        vw_innerpanel1Layout.setHorizontalGroup(
            vw_innerpanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vw_innerpanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bReduzViewport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bAmpliaViewport)
                .addContainerGap())
        );
        vw_innerpanel1Layout.setVerticalGroup(
            vw_innerpanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vw_innerpanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(vw_innerpanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bAmpliaViewport)
                    .addComponent(bReduzViewport))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        vw_innerpanel2.setBackground(new java.awt.Color(255, 255, 255));
        vw_innerpanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(0, 0, 0)), "Rotacionar", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        bRotHorViewport.setBackground(new java.awt.Color(255, 255, 255));
        bRotHorViewport.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        bRotHorViewport.setText("Horário");
        bRotHorViewport.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bRotHorViewport.setEnabled(false);
        bRotHorViewport.setMaximumSize(new java.awt.Dimension(100, 21));
        bRotHorViewport.setMinimumSize(new java.awt.Dimension(100, 21));
        bRotHorViewport.setPreferredSize(new java.awt.Dimension(100, 21));

        bRotAntiViewport.setBackground(new java.awt.Color(255, 255, 255));
        bRotAntiViewport.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        bRotAntiViewport.setText("Anti-Horário");
        bRotAntiViewport.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bRotAntiViewport.setEnabled(false);
        bRotAntiViewport.setMaximumSize(new java.awt.Dimension(100, 21));
        bRotAntiViewport.setMinimumSize(new java.awt.Dimension(100, 21));
        bRotAntiViewport.setPreferredSize(new java.awt.Dimension(100, 21));
        bRotAntiViewport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRotAntiViewportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout vw_innerpanel2Layout = new javax.swing.GroupLayout(vw_innerpanel2);
        vw_innerpanel2.setLayout(vw_innerpanel2Layout);
        vw_innerpanel2Layout.setHorizontalGroup(
            vw_innerpanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, vw_innerpanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bRotAntiViewport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(bRotHorViewport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        vw_innerpanel2Layout.setVerticalGroup(
            vw_innerpanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vw_innerpanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(vw_innerpanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bRotHorViewport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bRotAntiViewport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 14, Short.MAX_VALUE))
        );

        bLimpaViewport.setBackground(new java.awt.Color(255, 255, 255));
        bLimpaViewport.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        bLimpaViewport.setForeground(new java.awt.Color(255, 0, 0));
        bLimpaViewport.setText("Limpar Viewport");
        bLimpaViewport.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bLimpaViewport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLimpaViewportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout viewportsubpanelLayout = new javax.swing.GroupLayout(viewportsubpanel);
        viewportsubpanel.setLayout(viewportsubpanelLayout);
        viewportsubpanelLayout.setHorizontalGroup(
            viewportsubpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewportsubpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(viewportsubpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(vw_innerpanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(vw_innerpanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(viewportsubpanelLayout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addComponent(bLimpaViewport)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        viewportsubpanelLayout.setVerticalGroup(
            viewportsubpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewportsubpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(vw_innerpanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(vw_innerpanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bLimpaViewport)
                .addContainerGap(632, Short.MAX_VALUE))
        );

        Opcoes.addTab("Viewport", viewportsubpanel);

        drawsubpanel.setBackground(new java.awt.Color(255, 255, 255));

        objList.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        objList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tipo", "Nome"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(objList);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Lista de Objetos");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        obj_innerpanel1.setBackground(new java.awt.Color(255, 255, 255));
        obj_innerpanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(0, 0, 0)), "Mover", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        vlrMovObjX.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        vlrMovObjX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vlrMovObjXActionPerformed(evt);
            }
        });

        MoverObj.setBackground(new java.awt.Color(255, 255, 255));
        MoverObj.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        MoverObj.setText("Mover");
        MoverObj.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        MoverObj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoverObjActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel4.setText("Passo X:");

        vlrMovObjY.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        vlrMovObjY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vlrMovObjYActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel6.setText("Passo Y:");

        javax.swing.GroupLayout obj_innerpanel1Layout = new javax.swing.GroupLayout(obj_innerpanel1);
        obj_innerpanel1.setLayout(obj_innerpanel1Layout);
        obj_innerpanel1Layout.setHorizontalGroup(
            obj_innerpanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(obj_innerpanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(obj_innerpanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, obj_innerpanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 108, Short.MAX_VALUE)
                        .addComponent(vlrMovObjX, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(obj_innerpanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(vlrMovObjY, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, obj_innerpanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(MoverObj)))
                .addContainerGap())
        );
        obj_innerpanel1Layout.setVerticalGroup(
            obj_innerpanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(obj_innerpanel1Layout.createSequentialGroup()
                .addGroup(obj_innerpanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vlrMovObjX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(obj_innerpanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vlrMovObjY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MoverObj)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        drw_innerpanel1.setBackground(new java.awt.Color(255, 255, 255));
        drw_innerpanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(0, 0, 0)), "Redimensionar", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel16.setText("Aspecto X:");

        vlrZoomObjX.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        vlrZoomObjX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vlrZoomObjXActionPerformed(evt);
            }
        });

        vlrZoomObjY.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        vlrZoomObjY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vlrZoomObjYActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel17.setText("Aspecto Y:");

        RedimensionarObj.setBackground(new java.awt.Color(255, 255, 255));
        RedimensionarObj.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        RedimensionarObj.setText("Redimensionar");
        RedimensionarObj.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        RedimensionarObj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RedimensionarObjActionPerformed(evt);
            }
        });

        redimensionarsobreOrigem.setBackground(new java.awt.Color(255, 255, 255));
        redimensionarsobreOrigem.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        redimensionarsobreOrigem.setText("Sobre a origem P1");
        redimensionarsobreOrigem.setEnabled(false);
        redimensionarsobreOrigem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redimensionarsobreOrigemActionPerformed(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel20.setText("X");

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel21.setText("X");

        redimensionarsobreCentro.setBackground(new java.awt.Color(255, 255, 255));
        redimensionarsobreCentro.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        redimensionarsobreCentro.setText("Sobre o centro");
        redimensionarsobreCentro.setEnabled(false);
        redimensionarsobreCentro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redimensionarsobreCentroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout drw_innerpanel1Layout = new javax.swing.GroupLayout(drw_innerpanel1);
        drw_innerpanel1.setLayout(drw_innerpanel1Layout);
        drw_innerpanel1Layout.setHorizontalGroup(
            drw_innerpanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drw_innerpanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(drw_innerpanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(drw_innerpanel1Layout.createSequentialGroup()
                        .addGroup(drw_innerpanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(drw_innerpanel1Layout.createSequentialGroup()
                                .addComponent(redimensionarsobreOrigem)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(redimensionarsobreCentro))
                            .addGroup(drw_innerpanel1Layout.createSequentialGroup()
                                .addGroup(drw_innerpanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel17)
                                    .addComponent(jLabel16))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(drw_innerpanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(vlrZoomObjX, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(vlrZoomObjY, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(drw_innerpanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, drw_innerpanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(RedimensionarObj)))
                .addContainerGap())
        );
        drw_innerpanel1Layout.setVerticalGroup(
            drw_innerpanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drw_innerpanel1Layout.createSequentialGroup()
                .addGroup(drw_innerpanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(vlrZoomObjX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(drw_innerpanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vlrZoomObjY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(drw_innerpanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(redimensionarsobreOrigem)
                    .addComponent(redimensionarsobreCentro, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(RedimensionarObj)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        drw_innerpanel2.setBackground(new java.awt.Color(255, 255, 255));
        drw_innerpanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(0, 0, 0)), "Rotacionar", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        bAntiHorarioObjeto.setBackground(new java.awt.Color(255, 255, 255));
        bAntiHorarioObjeto.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        bAntiHorarioObjeto.setText("Anti H.");
        bAntiHorarioObjeto.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bAntiHorarioObjeto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAntiHorarioObjetoActionPerformed(evt);
            }
        });

        bHorarioObjeto.setBackground(new java.awt.Color(255, 255, 255));
        bHorarioObjeto.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        bHorarioObjeto.setText("Horario");
        bHorarioObjeto.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bHorarioObjeto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bHorarioObjetoActionPerformed(evt);
            }
        });

        vlrRotacObj.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        vlrRotacObj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vlrRotacObjActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel5.setText("Grau:");

        rotacionaemPonto.setBackground(new java.awt.Color(255, 255, 255));
        rotacionaemPonto.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rotacionaemPonto.setText("Sobre um ponto");
        rotacionaemPonto.setEnabled(false);
        rotacionaemPonto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacionaemPontoActionPerformed(evt);
            }
        });

        vlrXPontoRotacObj.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        vlrXPontoRotacObj.setEnabled(false);
        vlrXPontoRotacObj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vlrXPontoRotacObjActionPerformed(evt);
            }
        });

        vlrYPontoRotacObj.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        vlrYPontoRotacObj.setEnabled(false);
        vlrYPontoRotacObj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vlrYPontoRotacObjActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel18.setText("Posição X:");

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel19.setText("Posição Y:");

        rotacionanoCentro.setBackground(new java.awt.Color(255, 255, 255));
        rotacionanoCentro.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rotacionanoCentro.setText("Sobre o centro");
        rotacionanoCentro.setEnabled(false);
        rotacionanoCentro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacionanoCentroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout drw_innerpanel2Layout = new javax.swing.GroupLayout(drw_innerpanel2);
        drw_innerpanel2.setLayout(drw_innerpanel2Layout);
        drw_innerpanel2Layout.setHorizontalGroup(
            drw_innerpanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drw_innerpanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(drw_innerpanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(drw_innerpanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(vlrRotacObj, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(drw_innerpanel2Layout.createSequentialGroup()
                        .addComponent(bAntiHorarioObjeto, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bHorarioObjeto, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(drw_innerpanel2Layout.createSequentialGroup()
                        .addComponent(rotacionaemPonto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rotacionanoCentro)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, drw_innerpanel2Layout.createSequentialGroup()
                        .addGroup(drw_innerpanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18)
                            .addComponent(jLabel19))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(drw_innerpanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(vlrYPontoRotacObj, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                            .addComponent(vlrXPontoRotacObj))))
                .addContainerGap())
        );
        drw_innerpanel2Layout.setVerticalGroup(
            drw_innerpanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drw_innerpanel2Layout.createSequentialGroup()
                .addGroup(drw_innerpanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vlrRotacObj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(drw_innerpanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rotacionaemPonto)
                    .addComponent(rotacionanoCentro))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(drw_innerpanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(vlrXPontoRotacObj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(drw_innerpanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vlrYPontoRotacObj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(drw_innerpanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bAntiHorarioObjeto)
                    .addComponent(bHorarioObjeto))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bRemoveObjeto.setBackground(new java.awt.Color(255, 255, 255));
        bRemoveObjeto.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        bRemoveObjeto.setForeground(new java.awt.Color(255, 0, 0));
        bRemoveObjeto.setText("Remover Objeto");
        bRemoveObjeto.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bRemoveObjeto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRemoveObjetoActionPerformed(evt);
            }
        });

        operaMatriz.setBackground(new java.awt.Color(255, 255, 255));
        operaMatriz.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        operaMatriz.setText("Operações por Matriz!");
        operaMatriz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operaMatrizActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout drawsubpanelLayout = new javax.swing.GroupLayout(drawsubpanel);
        drawsubpanel.setLayout(drawsubpanelLayout);
        drawsubpanelLayout.setHorizontalGroup(
            drawsubpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, drawsubpanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bRemoveObjeto)
                .addGap(83, 83, 83))
            .addGroup(drawsubpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(drawsubpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(drw_innerpanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(obj_innerpanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(drw_innerpanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(drawsubpanelLayout.createSequentialGroup()
                        .addComponent(operaMatriz)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        drawsubpanelLayout.setVerticalGroup(
            drawsubpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, drawsubpanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bRemoveObjeto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(operaMatriz)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(obj_innerpanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(drw_innerpanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(drw_innerpanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(288, Short.MAX_VALUE))
        );

        Opcoes.addTab("Desenho", drawsubpanel);

        tool_inner.setBackground(new java.awt.Color(255, 255, 255));

        reflet_innerpanel.setBackground(new java.awt.Color(255, 255, 255));
        reflet_innerpanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(0, 0, 0)), "Reflexão", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        RefletirObj.setBackground(new java.awt.Color(255, 255, 255));
        RefletirObj.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        RefletirObj.setText("Refletir");
        RefletirObj.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        RefletirObj.setEnabled(false);
        RefletirObj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefletirObjActionPerformed(evt);
            }
        });

        refletX.setBackground(new java.awt.Color(255, 255, 255));
        refletX.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        refletX.setText("Em relação a X");
        refletX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refletXActionPerformed(evt);
            }
        });

        refletY.setBackground(new java.awt.Color(255, 255, 255));
        refletY.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        refletY.setText("Em relação a Y");
        refletY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refletYActionPerformed(evt);
            }
        });

        refletOrigem.setBackground(new java.awt.Color(255, 255, 255));
        refletOrigem.setText("Em relação a Origem");
        refletOrigem.setEnabled(false);
        refletOrigem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refletOrigemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout reflet_innerpanelLayout = new javax.swing.GroupLayout(reflet_innerpanel);
        reflet_innerpanel.setLayout(reflet_innerpanelLayout);
        reflet_innerpanelLayout.setHorizontalGroup(
            reflet_innerpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reflet_innerpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reflet_innerpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(reflet_innerpanelLayout.createSequentialGroup()
                        .addGap(0, 164, Short.MAX_VALUE)
                        .addComponent(RefletirObj))
                    .addGroup(reflet_innerpanelLayout.createSequentialGroup()
                        .addGroup(reflet_innerpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(refletX)
                            .addComponent(refletY)
                            .addComponent(refletOrigem))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        reflet_innerpanelLayout.setVerticalGroup(
            reflet_innerpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reflet_innerpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(refletX)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(refletY)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(refletOrigem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(RefletirObj)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cisalha_innerpanel.setBackground(new java.awt.Color(255, 255, 255));
        cisalha_innerpanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(0, 0, 0)), "Cisalhamento", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        vlrAngCisalha.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        vlrAngCisalha.setEnabled(false);
        vlrAngCisalha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vlrAngCisalhaActionPerformed(evt);
            }
        });

        CisalharObj.setBackground(new java.awt.Color(255, 255, 255));
        CisalharObj.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        CisalharObj.setText("Cisalhar");
        CisalharObj.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        CisalharObj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CisalharObjActionPerformed(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel24.setText("Angulo:");

        cisalhaY.setBackground(new java.awt.Color(255, 255, 255));
        cisalhaY.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        cisalhaY.setText("Em relação a Y");
        cisalhaY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cisalhaYActionPerformed(evt);
            }
        });

        cisalhaX.setBackground(new java.awt.Color(255, 255, 255));
        cisalhaX.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        cisalhaX.setText("Em relação a X");
        cisalhaX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cisalhaXActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout cisalha_innerpanelLayout = new javax.swing.GroupLayout(cisalha_innerpanel);
        cisalha_innerpanel.setLayout(cisalha_innerpanelLayout);
        cisalha_innerpanelLayout.setHorizontalGroup(
            cisalha_innerpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cisalha_innerpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cisalha_innerpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cisalha_innerpanelLayout.createSequentialGroup()
                        .addGroup(cisalha_innerpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cisalhaX)
                            .addComponent(cisalhaY))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cisalha_innerpanelLayout.createSequentialGroup()
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
                        .addComponent(vlrAngCisalha, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cisalha_innerpanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(CisalharObj)))
                .addContainerGap())
        );
        cisalha_innerpanelLayout.setVerticalGroup(
            cisalha_innerpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cisalha_innerpanelLayout.createSequentialGroup()
                .addGroup(cisalha_innerpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vlrAngCisalha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cisalhaX)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cisalhaY)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CisalharObj)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout tool_innerLayout = new javax.swing.GroupLayout(tool_inner);
        tool_inner.setLayout(tool_innerLayout);
        tool_innerLayout.setHorizontalGroup(
            tool_innerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tool_innerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tool_innerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(reflet_innerpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cisalha_innerpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        tool_innerLayout.setVerticalGroup(
            tool_innerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tool_innerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(reflet_innerpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cisalha_innerpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(593, Short.MAX_VALUE))
        );

        Opcoes.addTab("Extra", tool_inner);

        matrixsubpanel.setBackground(new java.awt.Color(255, 255, 255));

        matrix_innerpanel1.setBackground(new java.awt.Color(255, 255, 255));
        matrix_innerpanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(0, 0, 0)), "Escalar", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel7.setText("Quantidade de Linhas:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel8.setText("Quantidade de Colunas:");

        bEscalar.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        bEscalar.setText("Ok");
        bEscalar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEscalarActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel15.setText("Valor Escalar:");

        javax.swing.GroupLayout matrix_innerpanel1Layout = new javax.swing.GroupLayout(matrix_innerpanel1);
        matrix_innerpanel1.setLayout(matrix_innerpanel1Layout);
        matrix_innerpanel1Layout.setHorizontalGroup(
            matrix_innerpanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matrix_innerpanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(matrix_innerpanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(matrix_innerpanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(bEscalar))
                    .addGroup(matrix_innerpanel1Layout.createSequentialGroup()
                        .addGroup(matrix_innerpanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7))
                        .addGap(21, 21, 21)
                        .addGroup(matrix_innerpanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(linEscalar)
                            .addComponent(colEscalar)
                            .addComponent(vlrEscalar))))
                .addContainerGap())
        );
        matrix_innerpanel1Layout.setVerticalGroup(
            matrix_innerpanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matrix_innerpanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(matrix_innerpanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(linEscalar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(matrix_innerpanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(colEscalar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(matrix_innerpanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(vlrEscalar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bEscalar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        matrix_innerpanel2.setBackground(new java.awt.Color(255, 255, 255));
        matrix_innerpanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(0, 0, 0)), "Multiplicação", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel9.setText("Quantidade de Linhas A:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel10.setText("Quantidade de Colunas A:");

        bMultiplica.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        bMultiplica.setText("Ok");
        bMultiplica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bMultiplicaActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel11.setText("Quantidade de Linhas B:");

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel12.setText("Quantidade de Colunas B:");

        javax.swing.GroupLayout matrix_innerpanel2Layout = new javax.swing.GroupLayout(matrix_innerpanel2);
        matrix_innerpanel2.setLayout(matrix_innerpanel2Layout);
        matrix_innerpanel2Layout.setHorizontalGroup(
            matrix_innerpanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matrix_innerpanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(matrix_innerpanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(matrix_innerpanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(bMultiplica))
                    .addGroup(matrix_innerpanel2Layout.createSequentialGroup()
                        .addGroup(matrix_innerpanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel9))
                        .addGap(18, 60, Short.MAX_VALUE)
                        .addGroup(matrix_innerpanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(linMultA, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                            .addComponent(colMultA)))
                    .addGroup(matrix_innerpanel2Layout.createSequentialGroup()
                        .addGroup(matrix_innerpanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel11))
                        .addGap(18, 61, Short.MAX_VALUE)
                        .addGroup(matrix_innerpanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(linMultB)
                            .addComponent(colMultB, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        matrix_innerpanel2Layout.setVerticalGroup(
            matrix_innerpanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matrix_innerpanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(matrix_innerpanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(linMultA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(matrix_innerpanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(colMultA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(matrix_innerpanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(linMultB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(matrix_innerpanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(colMultB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bMultiplica))
        );

        matrix_innerpanel3.setBackground(new java.awt.Color(255, 255, 255));
        matrix_innerpanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(0, 0, 0)), "Soma", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel13.setText("Quantidade de Linhas:");

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel14.setText("Quantidade de Colunas:");

        bSoma1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        bSoma1.setText("Ok");
        bSoma1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSoma1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout matrix_innerpanel3Layout = new javax.swing.GroupLayout(matrix_innerpanel3);
        matrix_innerpanel3.setLayout(matrix_innerpanel3Layout);
        matrix_innerpanel3Layout.setHorizontalGroup(
            matrix_innerpanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matrix_innerpanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(matrix_innerpanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(matrix_innerpanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(bSoma1))
                    .addGroup(matrix_innerpanel3Layout.createSequentialGroup()
                        .addGroup(matrix_innerpanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(matrix_innerpanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(linSoma)
                            .addComponent(colSoma))))
                .addContainerGap())
        );
        matrix_innerpanel3Layout.setVerticalGroup(
            matrix_innerpanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matrix_innerpanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(matrix_innerpanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(linSoma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(matrix_innerpanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(colSoma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bSoma1)
                .addGap(0, 3, Short.MAX_VALUE))
        );

        bLimpaMatriz.setBackground(new java.awt.Color(255, 255, 255));
        bLimpaMatriz.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        bLimpaMatriz.setForeground(new java.awt.Color(255, 0, 0));
        bLimpaMatriz.setText("Limpar Matriz");
        bLimpaMatriz.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bLimpaMatriz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLimpaMatrizActionPerformed(evt);
            }
        });

        resultMatrix.setEditable(false);
        resultMatrix.setColumns(20);
        resultMatrix.setRows(5);
        matrixScroll.setViewportView(resultMatrix);

        javax.swing.GroupLayout matrixsubpanelLayout = new javax.swing.GroupLayout(matrixsubpanel);
        matrixsubpanel.setLayout(matrixsubpanelLayout);
        matrixsubpanelLayout.setHorizontalGroup(
            matrixsubpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matrixsubpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(matrixsubpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(matrix_innerpanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(matrix_innerpanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(matrix_innerpanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(matrixScroll)
                    .addComponent(bLimpaMatriz, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        matrixsubpanelLayout.setVerticalGroup(
            matrixsubpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matrixsubpanelLayout.createSequentialGroup()
                .addComponent(matrix_innerpanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(matrix_innerpanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(matrix_innerpanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(matrixScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bLimpaMatriz)
                .addContainerGap(192, Short.MAX_VALUE))
        );

        Opcoes.addTab("Matrizes", matrixsubpanel);

        bAcimaViewport.setBackground(new java.awt.Color(255, 255, 255));
        bAcimaViewport.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        bAcimaViewport.setText("↑");
        bAcimaViewport.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bAcimaViewport.setMaximumSize(new java.awt.Dimension(700, 30));
        bAcimaViewport.setMinimumSize(new java.awt.Dimension(700, 30));
        bAcimaViewport.setPreferredSize(new java.awt.Dimension(700, 30));
        bAcimaViewport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAcimaViewportActionPerformed(evt);
            }
        });

        bAbaixoViewport.setBackground(new java.awt.Color(255, 255, 255));
        bAbaixoViewport.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        bAbaixoViewport.setText("↓");
        bAbaixoViewport.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bAbaixoViewport.setMaximumSize(new java.awt.Dimension(700, 30));
        bAbaixoViewport.setMinimumSize(new java.awt.Dimension(700, 30));
        bAbaixoViewport.setPreferredSize(new java.awt.Dimension(700, 30));
        bAbaixoViewport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAbaixoViewportActionPerformed(evt);
            }
        });

        bDireitaViewport.setBackground(new java.awt.Color(255, 255, 255));
        bDireitaViewport.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        bDireitaViewport.setText("→");
        bDireitaViewport.setAutoscrolls(true);
        bDireitaViewport.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bDireitaViewport.setMaximumSize(new java.awt.Dimension(46, 700));
        bDireitaViewport.setMinimumSize(new java.awt.Dimension(46, 700));
        bDireitaViewport.setPreferredSize(new java.awt.Dimension(46, 700));
        bDireitaViewport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDireitaViewportActionPerformed(evt);
            }
        });

        bEsquerdaViewport.setBackground(new java.awt.Color(255, 255, 255));
        bEsquerdaViewport.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        bEsquerdaViewport.setText("←");
        bEsquerdaViewport.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bEsquerdaViewport.setMaximumSize(new java.awt.Dimension(46, 700));
        bEsquerdaViewport.setMinimumSize(new java.awt.Dimension(46, 700));
        bEsquerdaViewport.setPreferredSize(new java.awt.Dimension(46, 700));
        bEsquerdaViewport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEsquerdaViewportActionPerformed(evt);
            }
        });

        painelPintura.setBackground(new java.awt.Color(255, 255, 255));
        painelPintura.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        painelPintura.setForeground(new java.awt.Color(204, 204, 204));
        painelPintura.setMaximumSize(new java.awt.Dimension(700, 700));
        painelPintura.setMinimumSize(new java.awt.Dimension(700, 700));
        painelPintura.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                painelPinturaMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout painelPinturaLayout = new javax.swing.GroupLayout(painelPintura);
        painelPintura.setLayout(painelPinturaLayout);
        painelPinturaLayout.setHorizontalGroup(
            painelPinturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 696, Short.MAX_VALUE)
        );
        painelPinturaLayout.setVerticalGroup(
            painelPinturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Zoom:");

        vZoom.setEditable(false);
        vZoom.setBackground(new java.awt.Color(255, 255, 255));
        vZoom.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        vZoom.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        vZoom.setBorder(null);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("X");

        javax.swing.GroupLayout painelFundoLayout = new javax.swing.GroupLayout(painelFundo);
        painelFundo.setLayout(painelFundoLayout);
        painelFundoLayout.setHorizontalGroup(
            painelFundoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelFundoLayout.createSequentialGroup()
                .addGroup(painelFundoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelFundoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(painelFundoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painelFundoLayout.createSequentialGroup()
                                .addComponent(vZoom)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3))
                            .addComponent(jLabel2))
                        .addGap(925, 925, 925))
                    .addGroup(painelFundoLayout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(bEsquerdaViewport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painelFundoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bAcimaViewport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bAbaixoViewport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(painelPintura, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bDireitaViewport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(seperaPainel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(298, 298, 298))
            .addGroup(painelFundoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelFundoLayout.createSequentialGroup()
                    .addContainerGap(984, Short.MAX_VALUE)
                    .addComponent(Opcoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(8, 8, 8)))
        );
        painelFundoLayout.setVerticalGroup(
            painelFundoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(seperaPainel, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(painelFundoLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelFundoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vZoom, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(5, 5, 5)
                .addComponent(bAcimaViewport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelFundoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(painelPintura, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bEsquerdaViewport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bDireitaViewport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bAbaixoViewport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(79, Short.MAX_VALUE))
            .addGroup(painelFundoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(Opcoes, javax.swing.GroupLayout.PREFERRED_SIZE, 819, Short.MAX_VALUE))
        );

        topMenu.setBackground(new java.awt.Color(255, 255, 255));

        topMenuArquivo.setBackground(new java.awt.Color(255, 255, 255));
        topMenuArquivo.setText("Arquivo");

        itemAbrirLista.setBackground(new java.awt.Color(255, 255, 255));
        itemAbrirLista.setText("Abrir Lista de Objetos");
        itemAbrirLista.setEnabled(false);
        itemAbrirLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemAbrirListaActionPerformed(evt);
            }
        });
        topMenuArquivo.add(itemAbrirLista);

        itemSalvarLista.setBackground(new java.awt.Color(255, 255, 255));
        itemSalvarLista.setText("Salvar Lista de Objetos");
        itemSalvarLista.setEnabled(false);
        itemSalvarLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSalvarListaActionPerformed(evt);
            }
        });
        topMenuArquivo.add(itemSalvarLista);

        itemFecharApp.setBackground(new java.awt.Color(255, 255, 255));
        itemFecharApp.setForeground(new java.awt.Color(255, 0, 51));
        itemFecharApp.setText("Fechar Aplicação");
        itemFecharApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemFecharAppActionPerformed(evt);
            }
        });
        topMenuArquivo.add(itemFecharApp);

        topMenu.add(topMenuArquivo);

        topMenuDesenhar1.setBackground(new java.awt.Color(255, 255, 255));
        topMenuDesenhar1.setText("Ferramentas");

        itemMostraGuia.setText("Mostrar Guia");
        itemMostraGuia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMostraGuiaActionPerformed(evt);
            }
        });
        topMenuDesenhar1.add(itemMostraGuia);

        itemEscondeGuia.setText("Esconder Guia");
        itemEscondeGuia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemEscondeGuiaActionPerformed(evt);
            }
        });
        topMenuDesenhar1.add(itemEscondeGuia);

        topMenu.add(topMenuDesenhar1);

        topMenuDesenhar.setBackground(new java.awt.Color(255, 255, 255));
        topMenuDesenhar.setText("Desenhar");

        itemPonto.setText("Ponto");
        itemPonto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemPontoActionPerformed(evt);
            }
        });
        topMenuDesenhar.add(itemPonto);

        itemLinha.setText("Linha - Dois Pontos");
        itemLinha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemLinhaActionPerformed(evt);
            }
        });
        topMenuDesenhar.add(itemLinha);

        itemPolilinha.setText("Linha - Polilinha");
        itemPolilinha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemPolilinhaActionPerformed(evt);
            }
        });
        topMenuDesenhar.add(itemPolilinha);

        itemPoligono.setText("Polígono");
        itemPoligono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemPoligonoActionPerformed(evt);
            }
        });
        topMenuDesenhar.add(itemPoligono);

        topMenu.add(topMenuDesenhar);

        setJMenuBar(topMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(painelFundo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(painelFundo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void itemLinhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemLinhaActionPerformed
        Linhawind linha = new Linhawind();
        linha.setVisible(true);// TODO add your handling code here:
    }//GEN-LAST:event_itemLinhaActionPerformed

    private void itemPolilinhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemPolilinhaActionPerformed
        Polilinhawind polilinha = new Polilinhawind();
        polilinha.setVisible(true);
    }//GEN-LAST:event_itemPolilinhaActionPerformed

    private void itemPoligonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemPoligonoActionPerformed
        Poligonowind poligono = new Poligonowind();
        poligono.setVisible(true);
    }//GEN-LAST:event_itemPoligonoActionPerformed

    private void itemAbrirListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemAbrirListaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_itemAbrirListaActionPerformed

    private void itemSalvarListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSalvarListaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_itemSalvarListaActionPerformed

    private void itemFecharAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemFecharAppActionPerformed
        int i = JOptionPane.showConfirmDialog(null, "Deseja fechar a aplicação?",
                "Saída", JOptionPane.YES_NO_OPTION);
        if (i == JOptionPane.YES_OPTION) {
            System.exit(0);
        } else {
            System.out.println("Ficou");
        }
    }//GEN-LAST:event_itemFecharAppActionPerformed

    private void itemMostraGuiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMostraGuiaActionPerformed
        Ponto p1a = new Ponto(-700, 0);
        Ponto p1b = new Ponto(700, 0);
        Guia guiax = new Guia(p1a, p1b);
        DesenhaObjetos.guia.add(guiax);
        Ponto p2a = new Ponto(0, -700);
        Ponto p2b = new Ponto(0, 700);
        Guia guiay = new Guia(p2a, p2b);
        DesenhaObjetos.guia.add(guiay);
        DesenhaObjetos.desenhaObjetos((Graphics2D) painelPintura.getGraphics());
        JOptionPane.showConfirmDialog(null, "Mostrando Guia", "Guia", JOptionPane.PLAIN_MESSAGE);
        System.out.println("Adicinou Guia!");
        /*DesenhaObjetos.desenhaGuia (

         (Graphics2D) painelPintura.getGraphics());
         */
        //DesenhaObjetos.desenhaGuia((Graphics2D) painelPintura.getGraphics());        // TODO add your handling code here:
    }//GEN-LAST:event_itemMostraGuiaActionPerformed

    private void itemEscondeGuiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemEscondeGuiaActionPerformed
        if (DesenhaObjetos.guia.size() > 0) {
            try {
                DesenhaObjetos.guia.clear();
            } catch (Exception e) {
                System.out.println(e);
            }
            //System.out.println("Removeu Guia");
            DesenhaObjetos.updateList();
            DesenhaObjetos.desenhaObjetos((Graphics2D) painelPintura.getGraphics());
            JOptionPane.showConfirmDialog(null, "Escondendo Guia", "Guia", JOptionPane.PLAIN_MESSAGE);// TODO add your handling code here:
        } else {
            JOptionPane.showConfirmDialog(null, "Guia não está sendo mostrada", "Guia", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_itemEscondeGuiaActionPerformed

    private void itemPontoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemPontoActionPerformed
        Pontowind ponto = new Pontowind();//this, listaObjetosDesenhados);
        ponto.setVisible(true);
    }//GEN-LAST:event_itemPontoActionPerformed

    private void bEsquerdaViewportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEsquerdaViewportActionPerformed
        try {
            DesenhaObjetos.xwmin = DesenhaObjetos.xwmin - 10;
            DesenhaObjetos.xwmax = DesenhaObjetos.xwmax - 10;
            DesenhaObjetos.desenhaObjetos((Graphics2D) painelPintura.getGraphics());
            System.out.println("Moveu para a direita!");// TODO add your handling code here:
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_bEsquerdaViewportActionPerformed

    private void bAbaixoViewportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAbaixoViewportActionPerformed
        try {
            DesenhaObjetos.ywmin = DesenhaObjetos.ywmin - 10;
            DesenhaObjetos.ywmax = DesenhaObjetos.ywmax - 10;
            DesenhaObjetos.desenhaObjetos((Graphics2D) painelPintura.getGraphics());
            System.out.println("Moveu para Cima!");// TODO add your handling code here:
        } catch (Exception e) {
            System.out.println(e);
        }         // TODO add your handling code here:
    }//GEN-LAST:event_bAbaixoViewportActionPerformed

    private void painelPinturaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_painelPinturaMouseClicked

    }//GEN-LAST:event_painelPinturaMouseClicked

    private void bDireitaViewportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDireitaViewportActionPerformed
        try {
            DesenhaObjetos.xwmin = DesenhaObjetos.xwmin + 10;
            DesenhaObjetos.xwmax = DesenhaObjetos.xwmax + 10;
            DesenhaObjetos.desenhaObjetos((Graphics2D) painelPintura.getGraphics());
            System.out.println("Moveu para a esquerda!");// TODO add your handling code here:
        } catch (Exception e) {
            System.out.println(e);
        }        // TODO add your handling code here:       
    }//GEN-LAST:event_bDireitaViewportActionPerformed

    private void bAcimaViewportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAcimaViewportActionPerformed
        try {
            DesenhaObjetos.ywmin = DesenhaObjetos.ywmin + 10;
            DesenhaObjetos.ywmax = DesenhaObjetos.ywmax + 10;
            DesenhaObjetos.desenhaObjetos((Graphics2D) painelPintura.getGraphics());
            System.out.println("Moveu para Baixo!");// TODO add your handling code here:
        } catch (Exception e) {
            System.out.println(e);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_bAcimaViewportActionPerformed

    private void bRemoveObjetoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRemoveObjetoActionPerformed
        try {
            if (objList.getSelectedRow() > -1) {
                int i = objList.getSelectedRow();
                try {
                    for (int j = 0; j < DesenhaObjetos.pontos.size(); j++) {
                        if (DesenhaObjetos.pontos.get(j).getNome().equals(objList.getValueAt(i, 1))) {
                            DesenhaObjetos.pontos.remove(j);
                            System.out.println("Removeu pontos");
                        }
                    }
                } catch (Exception e) {
                    System.out.println(e);
                }
                try {
                    for (int j = 0; j < DesenhaObjetos.linhas.size(); j++) {
                        if (DesenhaObjetos.linhas.get(j).getNome().equals(objList.getValueAt(i, 1))) {
                            DesenhaObjetos.linhas.remove(j);
                            System.out.println("Removeu linhas");
                        }
                    }
                } catch (Exception e) {
                    System.out.println(e);
                }
                try {
                    for (int j = 0; j < DesenhaObjetos.polilinhas.size(); j++) {
                        if (DesenhaObjetos.polilinhas.get(j).getNome().equals(objList.getValueAt(i, 1))) {
                            DesenhaObjetos.polilinhas.remove(j);
                            System.out.println("Removeu polilinhas");
                        }
                    }
                } catch (Exception e) {
                    System.out.println(e);
                }
                try {
                    for (int j = 0; j < DesenhaObjetos.poligonos.size(); j++) {
                        if (DesenhaObjetos.poligonos.get(j).getNome().equals(objList.getValueAt(i, 1))) {
                            DesenhaObjetos.poligonos.remove(j);
                            System.out.println("Removeu poligonos");
                        }
                    }
                } catch (Exception e) {
                    System.out.println(e);
                }
                System.out.println(i + "row selecionado");
            } else {
                JOptionPane.showConfirmDialog(null, "Necessário selecionar um objeto!", "", JOptionPane.PLAIN_MESSAGE);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        DesenhaObjetos.updateList();
        DesenhaObjetos.desenhaObjetos((Graphics2D) painelPintura.getGraphics());
        //TODO add your handling code here
    }//GEN-LAST:event_bRemoveObjetoActionPerformed

    private void bLimpaViewportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLimpaViewportActionPerformed
        int i = JOptionPane.showConfirmDialog(null, "Deseja limpar o painel de pintura?",
                "Limpar", JOptionPane.YES_NO_OPTION);
        if (i == JOptionPane.YES_OPTION) {
            if (DesenhaObjetos.pontos.size() > 0) {
                for (int g = 0; g <= DesenhaObjetos.pontos.size(); g++) {
                    DesenhaObjetos.pontos.remove(g);
                }
                System.out.println("Removeu Pontos");
            }
            if (DesenhaObjetos.linhas.size() > 0) {
                for (int h = 0; h <= DesenhaObjetos.linhas.size(); h++) {
                    DesenhaObjetos.linhas.remove(h);
                }
                System.out.println("Removeu Linhas");
            }
            if (DesenhaObjetos.polilinhas.size() > 0) {
                for (int f = 0; f <= DesenhaObjetos.polilinhas.size(); f++) {
                    DesenhaObjetos.polilinhas.remove(f);
                }
                System.out.println("Removeu Polilinhas");
            }
            if (DesenhaObjetos.poligonos.size() > 0) {
                for (int o = 0; o <= DesenhaObjetos.poligonos.size(); o++) {
                    DesenhaObjetos.poligonos.remove(o);
                }
                System.out.println("Removeu Poligonos");
            }
            System.out.println("Removeu todos os objetos existentes");
            painelPintura.removeAll();
            DesenhaObjetos.updateList();
            painelPintura.repaint();
            JOptionPane.showConfirmDialog(null, "Painel de Pintura Limpo", "", JOptionPane.PLAIN_MESSAGE);
        } else {
            System.out.println("Operação Cancelada");
        }
    }//GEN-LAST:event_bLimpaViewportActionPerformed

    private void bRotAntiViewportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRotAntiViewportActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bRotAntiViewportActionPerformed

    private void bReduzViewportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bReduzViewportActionPerformed
        try {
            if (zoom >= -50) {
                DesenhaObjetos.xwmin = DesenhaObjetos.xwmin - 10;
                DesenhaObjetos.xwmax = DesenhaObjetos.xwmax + 10;
                DesenhaObjetos.ywmin = DesenhaObjetos.ywmin - 10;
                DesenhaObjetos.ywmax = DesenhaObjetos.ywmax + 10;
                DesenhaObjetos.desenhaObjetos((Graphics2D) painelPintura.getGraphics());
                zoom--;
                vZoom.setText(String.valueOf(zoom));// TODO add your handling code here:
            } else {
                JOptionPane.showConfirmDialog(null, "Zoom Mínimo atingido!", "", JOptionPane.PLAIN_MESSAGE);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_bReduzViewportActionPerformed

    private void bAmpliaViewportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAmpliaViewportActionPerformed
        try {
            if (zoom <= 50) {
                DesenhaObjetos.xwmin = DesenhaObjetos.xwmin + 10;
                DesenhaObjetos.xwmax = DesenhaObjetos.xwmax - 10;
                DesenhaObjetos.ywmin = DesenhaObjetos.ywmin + 10;
                DesenhaObjetos.ywmax = DesenhaObjetos.ywmax - 10;
                DesenhaObjetos.desenhaObjetos((Graphics2D) painelPintura.getGraphics());
                zoom++;
                vZoom.setText(String.valueOf(zoom));
            } else {
                JOptionPane.showConfirmDialog(null, "Zoom Máximo atingido!", "", JOptionPane.PLAIN_MESSAGE);
            }
        } catch (Exception e) {
            System.out.println(e);
        }// TODO add your handling code here:
    }//GEN-LAST:event_bAmpliaViewportActionPerformed

    private void bLimpaMatrizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLimpaMatrizActionPerformed
        if (!resultMatrix.getText().equals("")) {
            resultMatrix.setText("");
            JOptionPane.showConfirmDialog(null, "Matriz Limpa!", "", JOptionPane.PLAIN_MESSAGE);
        } else {
            JOptionPane.showConfirmDialog(null, "Matriz já está Limpa!!", "", JOptionPane.PLAIN_MESSAGE);
        }// TODO add your handling code here:
    }//GEN-LAST:event_bLimpaMatrizActionPerformed

    private void bSoma1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSoma1ActionPerformed
        try {
            if (linSoma.getText().equals("") || colSoma.getText().equals("")) {
                JOptionPane.showConfirmDialog(null, "Favor preencher todos os valores!", "", JOptionPane.PLAIN_MESSAGE);
            } else {
                resultMatrix.setText("");

                int linhas = Integer.parseInt(linSoma.getText());
                int colunas = Integer.parseInt(colSoma.getText());

                int matrizSoma1[][];
                int matrizSoma2[][];
                int matrizResultadoSoma[][] = new int[linhas][colunas];
                String ResultSoma;
                Matriz matrizSoma = new Matriz();

                matrizSoma1 = matrizSoma.getMatrizRandom(linhas, colunas);
                matrizSoma2 = matrizSoma.getMatrizRandom(linhas, colunas);

                Matriz convmatrizSoma1 = new Matriz();
                ResultSoma = "Matriz 1\n";
                ResultSoma = ResultSoma + convmatrizSoma1.setMatrizString(linhas, colunas, matrizSoma1);

                Matriz convmatrizSoma2 = new Matriz();
                ResultSoma = ResultSoma + "\nMatriz 2\n";
                ResultSoma = ResultSoma + convmatrizSoma2.setMatrizString(linhas, colunas, matrizSoma2);

                for (int i = 0; i < linhas; i++) {
                    for (int j = 0; j < colunas; j++) {
                        matrizResultadoSoma[i][j] = matrizSoma1[i][j] + matrizSoma2[i][j];
                        System.out.println(matrizResultadoSoma);
                    }
                }
                Matriz convmatrizResultado = new Matriz();
                ResultSoma = ResultSoma + "\n\nMatriz Resultado\n";
                ResultSoma = ResultSoma + convmatrizResultado.setMatrizString(linhas, colunas, matrizResultadoSoma);
                resultMatrix.setText(ResultSoma);
                JOptionPane.showConfirmDialog(null, "Soma de Matrizes calculada!", "", JOptionPane.PLAIN_MESSAGE);
                linSoma.setText("");
                colSoma.setText("");
                // TODO add your handling code here:
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_bSoma1ActionPerformed

    private void bMultiplicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMultiplicaActionPerformed
        try {
            if (linMultA.getText().equals("") || colMultA.getText().equals("") || linMultB.getText().equals("") || colMultB.getText().equals("")) {
                JOptionPane.showConfirmDialog(null, "Favor preencher todos os valores!", "", JOptionPane.PLAIN_MESSAGE);
            } else {
                resultMatrix.setText("");
                int linmultiA = Integer.parseInt(linMultA.getText());
                int colmultiA = Integer.parseInt(colMultA.getText());
                int linmultiB = Integer.parseInt(linMultB.getText());
                int colmultiB = Integer.parseInt(colMultB.getText());
                String ResultMult;

                System.out.println(colmultiA + " " + linmultiB);

                if (colmultiA == linmultiB) {
                    int matrizMultA[][];
                    int matrizMultB[][];
                    int matrizResultadoMult[][] = new int[linmultiA][colmultiB];

                    Matriz matrizMultiplicacao = new Matriz();
                    matrizMultA = matrizMultiplicacao.getMatrizRandom(linmultiA, colmultiA);
                    matrizMultB = matrizMultiplicacao.getMatrizRandom(linmultiB, colmultiB);

                    ResultMult = "Matriz A\n";
                    Matriz convmatrizMultA = new Matriz();
                    ResultMult = ResultMult + convmatrizMultA.setMatrizString(linmultiA, colmultiA, matrizMultA);

                    ResultMult = ResultMult + "\nMatriz B\n";
                    Matriz convmatrizMultB = new Matriz();
                    ResultMult = ResultMult + convmatrizMultB.setMatrizString(linmultiB, colmultiB, matrizMultB);

                    for (int i = 0; i < matrizMultA.length; i++) {
                        for (int j = 0; j < matrizMultB[0].length; j++) {
                            for (int k = 0; k < matrizMultA[0].length; k++) {
                                matrizResultadoMult[i][j] += (matrizMultA[i][k] * matrizMultB[k][j]);
                            }
                        }
                    }
                    Matriz convmatrizResultado = new Matriz();
                    ResultMult = ResultMult + "\nMatriz Multiplicada\n\n";
                    ResultMult = ResultMult + convmatrizResultado.setMatrizString(linmultiA, colmultiB, matrizResultadoMult);
                    resultMatrix.setText(ResultMult);
                    JOptionPane.showConfirmDialog(null, "Multiplicação de Matrizes calculada!", "", JOptionPane.PLAIN_MESSAGE);
                    linMultA.setText("");
                    colMultA.setText("");
                    linMultB.setText("");
                    colMultB.setText("");
                    // TODO add your handling code here:
                } else {
                    JOptionPane.showConfirmDialog(null, "Quantidade de Colunas da Matriz A (" + colmultiA + ") deve ser IGUAL a de Linhas da Matriz B (" + linmultiB + ")!", "", JOptionPane.PLAIN_MESSAGE);
                }
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_bMultiplicaActionPerformed

    private void bEscalarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEscalarActionPerformed
        try {
            if (linEscalar.getText().equals("") || colEscalar.getText().equals("") || vlrEscalar.getText().equals("")) {
                JOptionPane.showConfirmDialog(null, "Favor preencher todos os valores!", "", JOptionPane.PLAIN_MESSAGE);
            } else {
                resultMatrix.setText("");
                int linhas = Integer.parseInt(linEscalar.getText());
                int colunas = Integer.parseInt(colEscalar.getText());
                int escalar = Integer.parseInt(vlrEscalar.getText());

                int matriz[][];
                int matrizResultadoEscalar[][] = new int[linhas][colunas];
                Matriz matrizEscalar = new Matriz();
                String ResultEscalar = "";

                matriz = matrizEscalar.getMatrizRandom(linhas, colunas);
                ResultEscalar = ResultEscalar + "\nMatriz\n";
                ResultEscalar = ResultEscalar + matrizEscalar.setMatrizString(linhas, colunas, matriz);

                for (int i = 0; i < linhas; i++) {
                    for (int j = 0; j < colunas; j++) {
                        matrizResultadoEscalar[i][j] = matriz[i][j] * escalar;
                    }
                }

                ResultEscalar = ResultEscalar + "\nEscalar: " + escalar + "\n";
                ResultEscalar = ResultEscalar + "\nMatriz Escalar\n\n";
                Matriz matrizconvescalar = new Matriz();
                ResultEscalar = ResultEscalar + matrizconvescalar.setMatrizString(linhas, colunas, matrizResultadoEscalar);

                resultMatrix.setText(ResultEscalar);
                JOptionPane.showConfirmDialog(null, "Multiplicação por Escalar calculada!", "", JOptionPane.PLAIN_MESSAGE);

                linEscalar.setText("");
                colEscalar.setText("");
                vlrEscalar.setText("");
                // TODO add your handling code here:
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_bEscalarActionPerformed

    private void vlrMovObjXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vlrMovObjXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vlrMovObjXActionPerformed

    private void vlrRotacObjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vlrRotacObjActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vlrRotacObjActionPerformed

    private void MoverObjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoverObjActionPerformed
        if (operaMatriz.isSelected()) {
            try {
                if (!vlrMovObjX.getText().equals("") && !vlrMovObjY.getText().equals("")) {
                    if (objList.getSelectedRow() > -1) {
                        int x = objList.getSelectedRow();
                        double translacao[][] = {{1, 0, 0}, {0, 1, 0}, {Double.parseDouble(vlrMovObjX.getText()), Double.parseDouble(vlrMovObjY.getText()), 1}};
                        int pontos[] = new int[3];
                        int linhas[][] = new int[3][3];
                        int polilinhas[][];
                        int poligonos[][];

                        try {
                            for (int j = 0; j < DesenhaObjetos.pontos.size(); j++) {
                                if (DesenhaObjetos.pontos.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                    double matriz_ponto[] = {DesenhaObjetos.pontos.get(j).getX(), DesenhaObjetos.pontos.get(j).getY(), 1.00};
                                    pontos[0] = (int) ((matriz_ponto[0] * translacao[0][0])
                                            + (matriz_ponto[1] * translacao[1][0])
                                            + (matriz_ponto[2] * translacao[2][0]));
                                    pontos[1] = (int) ((matriz_ponto[0] * translacao[0][1])
                                            + (matriz_ponto[1] * translacao[1][1])
                                            + (matriz_ponto[2] * translacao[2][1]));
                                    pontos[2] = (int) ((matriz_ponto[0] * translacao[0][2])
                                            + (matriz_ponto[1] * translacao[1][2])
                                            + (matriz_ponto[2] * translacao[2][2]));
                                    DesenhaObjetos.pontos.get(j).setX(pontos[0]);
                                    DesenhaObjetos.pontos.get(j).setY(pontos[1]);
                                }
                                System.out.println("Transladou Pontos");
                            }
                            for (int j = 0; j < DesenhaObjetos.linhas.size(); j++) {
                                if (DesenhaObjetos.linhas.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                    double matriz_linha_p1[] = {DesenhaObjetos.linhas.get(j).getP1().getX(), DesenhaObjetos.linhas.get(j).getP1().getY(), 1.00};
                                    double matriz_linha_p2[] = {DesenhaObjetos.linhas.get(j).getP2().getX(), DesenhaObjetos.linhas.get(j).getP2().getY(), 1.00};
                                    linhas[0][0] = (int) ((matriz_linha_p1[0] * translacao[0][0])
                                            + (matriz_linha_p1[1] * translacao[1][0])
                                            + (matriz_linha_p1[2] * translacao[2][0]));
                                    linhas[0][1] = (int) ((matriz_linha_p1[0] * translacao[0][1])
                                            + (matriz_linha_p1[1] * translacao[1][1])
                                            + (matriz_linha_p1[2] * translacao[2][1]));
                                    linhas[0][2] = (int) ((matriz_linha_p1[0] * translacao[0][2])
                                            + (matriz_linha_p1[1] * translacao[1][2])
                                            + (matriz_linha_p1[2] * translacao[2][2]));
                                    linhas[1][0] = (int) ((matriz_linha_p2[0] * translacao[0][0])
                                            + (matriz_linha_p2[1] * translacao[1][0])
                                            + (matriz_linha_p2[2] * translacao[2][0]));
                                    linhas[1][1] = (int) ((matriz_linha_p2[0] * translacao[0][1])
                                            + (matriz_linha_p2[1] * translacao[1][1])
                                            + (matriz_linha_p2[2] * translacao[2][1]));
                                    linhas[1][2] = (int) ((matriz_linha_p2[0] * translacao[0][2])
                                            + (matriz_linha_p2[1] * translacao[1][2])
                                            + (matriz_linha_p2[2] * translacao[2][2]));
                                    DesenhaObjetos.linhas.get(j).getP1().setX(linhas[0][0]);
                                    DesenhaObjetos.linhas.get(j).getP1().setY(linhas[0][1]);
                                    DesenhaObjetos.linhas.get(j).getP2().setX(linhas[1][0]);
                                    DesenhaObjetos.linhas.get(j).getP2().setY(linhas[1][1]);
                                }
                                System.out.println("Transladou Linhas");
                            }

                            for (int j = 0; j < DesenhaObjetos.polilinhas.size(); j++) {
                                polilinhas = new int[DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().size()][3];
                                if (DesenhaObjetos.polilinhas.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                    for (int i = 0; i < DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().size(); i++) {
                                        double matriz_polilinha_pontos[] = {DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).getX(), DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).getY(), 1.00};
                                        polilinhas[i][0] = (int) ((matriz_polilinha_pontos[0] * translacao[0][0])
                                                + (matriz_polilinha_pontos[1] * translacao[1][0])
                                                + (matriz_polilinha_pontos[2] * translacao[2][0]));
                                        polilinhas[i][1] = (int) ((matriz_polilinha_pontos[0] * translacao[0][1])
                                                + (matriz_polilinha_pontos[1] * translacao[1][1])
                                                + (matriz_polilinha_pontos[2] * translacao[2][1]));
                                        polilinhas[i][2] = (int) ((matriz_polilinha_pontos[0] * translacao[0][2])
                                                + (matriz_polilinha_pontos[1] * translacao[1][2])
                                                + (matriz_polilinha_pontos[2] * translacao[2][2]));
                                        DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).setX(polilinhas[i][0]);
                                        DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).setY(polilinhas[i][1]);
                                    }
                                }
                                System.out.println("Transladou Polilinhas");
                            }

                            for (int j = 0; j < DesenhaObjetos.poligonos.size(); j++) {
                                poligonos = new int[DesenhaObjetos.poligonos.get(j).getPontosPoligono().size()][3];
                                if (DesenhaObjetos.poligonos.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                    for (int i = 0; i < DesenhaObjetos.poligonos.get(j).getPontosPoligono().size(); i++) {
                                        double matriz_poligono_pontos[] = {DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).getX(), DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).getY(), 1.00};
                                        poligonos[i][0] = (int) ((matriz_poligono_pontos[0] * translacao[0][0])
                                                + (matriz_poligono_pontos[1] * translacao[1][0])
                                                + (matriz_poligono_pontos[2] * translacao[2][0]));
                                        poligonos[i][1] = (int) ((matriz_poligono_pontos[0] * translacao[0][1])
                                                + (matriz_poligono_pontos[1] * translacao[1][1])
                                                + (matriz_poligono_pontos[2] * translacao[2][1]));
                                        poligonos[i][2] = (int) ((matriz_poligono_pontos[0] * translacao[0][2])
                                                + (matriz_poligono_pontos[1] * translacao[1][2])
                                                + (matriz_poligono_pontos[2] * translacao[2][2]));
                                        DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).setX(poligonos[i][0]);
                                        DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).setY(poligonos[i][1]);
                                    }
                                }
                                System.out.println("Transladou Poligonos");
                            }
                        } catch (Exception e) {
                            System.out.println(e);
                        }
                        System.out.println("MOVEU POR MATRIZ");
                        DesenhaObjetos.updateList();
                        DesenhaObjetos.desenhaObjetos((Graphics2D) painelPintura.getGraphics());
                    } else {
                        JOptionPane.showConfirmDialog(null, "Selecione um Objeto!", "", JOptionPane.PLAIN_MESSAGE);
                    }
                } else {
                    JOptionPane.showConfirmDialog(null, "Preencha o valor de passo!", "", JOptionPane.PLAIN_MESSAGE);
                }
            } catch (Exception e) {
                System.out.println(e);
            }
        } else {
            try {
                if (!vlrMovObjX.getText().equals("") && !vlrMovObjY.getText().equals("")) {
                    if (objList.getSelectedRow() > -1) {
                        double calculapasso = 0.00;
                        int x = objList.getSelectedRow();
                        //PONTOS
                        for (int j = 0; j < DesenhaObjetos.pontos.size(); j++) {
                            if (DesenhaObjetos.pontos.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                calculapasso = DesenhaObjetos.pontos.get(j).getX() + Double.parseDouble(vlrMovObjX.getText());
                                DesenhaObjetos.pontos.get(j).setX((int) calculapasso);
                                calculapasso = DesenhaObjetos.pontos.get(j).getY() + Double.parseDouble(vlrMovObjY.getText());
                                DesenhaObjetos.pontos.get(j).setY((int) calculapasso);
                            }
                        }
                        System.out.println("Transladou Pontos");
                        //LINHAS
                        for (int j = 0; j < DesenhaObjetos.linhas.size(); j++) {
                            if (DesenhaObjetos.linhas.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                calculapasso = DesenhaObjetos.linhas.get(j).getP1().getX() + Double.parseDouble(vlrMovObjX.getText());
                                DesenhaObjetos.linhas.get(j).getP1().setX((int) calculapasso);

                                calculapasso = DesenhaObjetos.linhas.get(j).getP1().getY() + Double.parseDouble(vlrMovObjY.getText());
                                DesenhaObjetos.linhas.get(j).getP1().setY((int) calculapasso);

                                calculapasso = DesenhaObjetos.linhas.get(j).getP2().getX() + Double.parseDouble(vlrMovObjX.getText());
                                DesenhaObjetos.linhas.get(j).getP2().setX((int) calculapasso);

                                calculapasso = DesenhaObjetos.linhas.get(j).getP2().getY() + Double.parseDouble(vlrMovObjY.getText());
                                DesenhaObjetos.linhas.get(j).getP2().setY((int) calculapasso);

                            }
                        }
                        System.out.println("Transladou Linhas");
                        //POLILINHAS
                        for (int j = 0; j < DesenhaObjetos.polilinhas.size(); j++) {
                            if (DesenhaObjetos.polilinhas.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                for (int i = 0; i < DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().size(); i++) {
                                    calculapasso = DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).getX() + Double.parseDouble(vlrMovObjX.getText());
                                    DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).setX((int) calculapasso);

                                    calculapasso = DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).getY() + Double.parseDouble(vlrMovObjY.getText());
                                    DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).setY((int) calculapasso);
                                }
                            }
                        }
                        System.out.println("Transladou Polilinhas");
                        //POLIGONOS
                        for (int j = 0; j < DesenhaObjetos.poligonos.size(); j++) {
                            if (DesenhaObjetos.poligonos.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                for (int i = 0; i < DesenhaObjetos.poligonos.get(j).getPontosPoligono().size(); i++) {
                                    calculapasso = DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).getX() + Double.parseDouble(vlrMovObjX.getText());
                                    DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).setX((int) calculapasso);

                                    calculapasso = DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).getY() + Double.parseDouble(vlrMovObjY.getText());
                                    DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).setY((int) calculapasso);
                                }
                            }
                        }
                        System.out.println("Transladou Poligonos");
                        System.out.println("Transladou TODOS PENDENTES");
                        calculapasso = 0.0;
                        vlrMovObjY.setText("");
                        vlrMovObjX.setText("");
                    } else {
                        JOptionPane.showConfirmDialog(null, "Selecione um Objeto!", "", JOptionPane.PLAIN_MESSAGE);
                    }
                } else {
                    JOptionPane.showConfirmDialog(null, "Preencha o valor de passo!", "", JOptionPane.PLAIN_MESSAGE);
                }
            } catch (Exception e) {
                System.out.println(e);
            }
            System.out.println("MOVEU SEM MATRIZ");
            DesenhaObjetos.updateList();
            DesenhaObjetos.desenhaObjetos((Graphics2D) painelPintura.getGraphics());
        }
    }//GEN-LAST:event_MoverObjActionPerformed

    private void vlrMovObjYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vlrMovObjYActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vlrMovObjYActionPerformed

    private void vlrZoomObjXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vlrZoomObjXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vlrZoomObjXActionPerformed

    private void vlrZoomObjYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vlrZoomObjYActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vlrZoomObjYActionPerformed

    private void RedimensionarObjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RedimensionarObjActionPerformed
        if (operaMatriz.isSelected()) {
            //MATRIZ SOBRE A ORIGEM
            if (redimensionarsobreOrigem.isSelected()) {
                try {
                    if (!vlrZoomObjX.getText().equals("") && !vlrZoomObjY.getText().equals("")) {
                        if (objList.getSelectedRow() > -1) {
                            int referencia = 1;
                            double escalonamento[][] = {{Double.parseDouble(vlrZoomObjX.getText()), 0, 0}, {0, Double.parseDouble(vlrZoomObjY.getText()), 0}, {0, 0, 1}};
                            int pontos[] = new int[3];
                            int linhas[][] = new int[3][3];
                            int polilinhas[][];
                            int poligonos[][];
                            int x = objList.getSelectedRow();
                            for (int j = 0; j < DesenhaObjetos.pontos.size(); j++) {
                                if (DesenhaObjetos.pontos.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                    double matriz_p[] = {DesenhaObjetos.pontos.get(j).getX(), DesenhaObjetos.pontos.get(j).getY(), 1.00};
                                    pontos[0] = (int) ((matriz_p[0] * escalonamento[0][0])
                                            + (matriz_p[1] * escalonamento[1][0])
                                            + (matriz_p[2] * escalonamento[2][0]));
                                    pontos[1] = (int) ((matriz_p[0] * escalonamento[0][1])
                                            + (matriz_p[1] * escalonamento[1][1])
                                            + (matriz_p[2] * escalonamento[2][1]));
                                    pontos[2] = (int) ((matriz_p[0] * escalonamento[0][2])
                                            + (matriz_p[1] * escalonamento[1][2])
                                            + (matriz_p[2] * escalonamento[2][2]));
                                    DesenhaObjetos.pontos.get(j).setX(pontos[0]);
                                    DesenhaObjetos.pontos.get(j).setY(pontos[1]);
                                }
                                System.out.println("Redimensionou Pontos");
                            }
                            for (int j = 0; j < DesenhaObjetos.linhas.size(); j++) {
                                if (DesenhaObjetos.linhas.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                    double matriz_p1[] = {DesenhaObjetos.linhas.get(j).getP1().getX(), DesenhaObjetos.linhas.get(j).getP1().getY(), 1.00};
                                    double matriz_p2[] = {DesenhaObjetos.linhas.get(j).getP2().getX(), DesenhaObjetos.linhas.get(j).getP2().getY(), 1.00};
                                    if (referencia == 0) {
                                        linhas[0][0] = (int) ((matriz_p1[0] * escalonamento[0][0])
                                                + (matriz_p1[1] * escalonamento[1][0])
                                                + (matriz_p1[2] * escalonamento[2][0]));
                                        linhas[0][1] = (int) ((matriz_p1[0] * escalonamento[0][1])
                                                + (matriz_p1[1] * escalonamento[1][1])
                                                + (matriz_p1[2] * escalonamento[2][1]));
                                        linhas[0][2] = (int) ((matriz_p1[0] * escalonamento[0][2])
                                                + (matriz_p1[1] * escalonamento[1][2])
                                                + (matriz_p1[2] * escalonamento[2][2]));
                                    }
                                    linhas[1][0] = (int) ((matriz_p2[0] * escalonamento[0][0])
                                            + (matriz_p2[1] * escalonamento[1][0])
                                            + (matriz_p2[2] * escalonamento[2][0]));
                                    linhas[1][1] = (int) ((matriz_p2[0] * escalonamento[0][1])
                                            + (matriz_p2[1] * escalonamento[1][1])
                                            + (matriz_p2[2] * escalonamento[2][1]));
                                    linhas[1][2] = (int) ((matriz_p2[0] * escalonamento[0][2])
                                            + (matriz_p2[1] * escalonamento[1][2])
                                            + (matriz_p2[2] * escalonamento[2][2]));
                                    if (referencia == 0) {
                                        DesenhaObjetos.linhas.get(j).getP1().setX(linhas[0][0]);
                                        DesenhaObjetos.linhas.get(j).getP1().setY(linhas[0][1]);
                                    }
                                    DesenhaObjetos.linhas.get(j).getP2().setX(linhas[1][0]);
                                    DesenhaObjetos.linhas.get(j).getP2().setY(linhas[1][1]);
                                }
                                System.out.println("Redimensionou Linhas");
                            }
                            for (int j = 0; j < DesenhaObjetos.polilinhas.size(); j++) {
                                polilinhas = new int[DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().size()][3];
                                if (DesenhaObjetos.polilinhas.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                    for (int i = referencia; i < DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().size(); i++) {
                                        double matriz_p[] = {DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).getX(), DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).getY(), 1.00};
                                        polilinhas[i][0] = (int) ((matriz_p[0] * escalonamento[0][0])
                                                + (matriz_p[1] * escalonamento[1][0])
                                                + (matriz_p[2] * escalonamento[2][0]));
                                        polilinhas[i][1] = (int) ((matriz_p[0] * escalonamento[0][1])
                                                + (matriz_p[1] * escalonamento[1][1])
                                                + (matriz_p[2] * escalonamento[2][1]));
                                        polilinhas[i][2] = (int) ((matriz_p[0] * escalonamento[0][2])
                                                + (matriz_p[1] * escalonamento[1][2])
                                                + (matriz_p[2] * escalonamento[2][2]));
                                        DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).setX(polilinhas[i][0]);
                                        DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).setY(polilinhas[i][1]);
                                    }
                                }
                                System.out.println("Redimensionou Polilinhas");
                            }
                            for (int j = 0; j < DesenhaObjetos.poligonos.size(); j++) {
                                poligonos = new int[DesenhaObjetos.poligonos.get(j).getPontosPoligono().size()][3];

                                if (DesenhaObjetos.poligonos.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                    for (int i = referencia; i < DesenhaObjetos.poligonos.get(j).getPontosPoligono().size(); i++) {
                                        double matriz_p[] = {DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).getX(), DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).getY(), 1.00};
                                        poligonos[i][0] = (int) ((matriz_p[0] * escalonamento[0][0])
                                                + (matriz_p[1] * escalonamento[1][0])
                                                + (matriz_p[2] * escalonamento[2][0]));
                                        poligonos[i][1] = (int) ((matriz_p[0] * escalonamento[0][1])
                                                + (matriz_p[1] * escalonamento[1][1])
                                                + (matriz_p[2] * escalonamento[2][1]));
                                        poligonos[i][2] = (int) ((matriz_p[0] * escalonamento[0][2])
                                                + (matriz_p[1] * escalonamento[1][2])
                                                + (matriz_p[2] * escalonamento[2][2]));
                                        //CORRIGIR PARA AUMENTAR A PARTIR DO PONTO UNIFORME
                                        if (i + 1 == (DesenhaObjetos.poligonos.get(j).getPontosPoligono().size())) {
                                            break;
                                        }
                                        DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).setX(poligonos[i][0]);
                                        DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).setY(poligonos[i][1]);
                                    }
                                }
                                System.out.println("Redimensionou Poligonos");
                            }
                            System.out.println("REDIMENSIONOU POR MATRIZ ORIGEM");
                            DesenhaObjetos.updateList();
                            DesenhaObjetos.desenhaObjetos((Graphics2D) painelPintura.getGraphics());
                            vlrZoomObjX.setText("");
                            vlrZoomObjY.setText("");
                        } else {
                            JOptionPane.showConfirmDialog(null, "Selecione um objeto!", "", JOptionPane.PLAIN_MESSAGE);
                        }
                    } else {
                        JOptionPane.showConfirmDialog(null, "Preencha os valores de aspecto!", "", JOptionPane.PLAIN_MESSAGE);
                    }
                } catch (Exception e) {
                    System.out.println(e);
                }
            }
            //SOBRE O CENTRO
            if (redimensionarsobreCentro.isSelected()) {
                try {
                    if (!vlrZoomObjX.getText().equals("") && !vlrZoomObjY.getText().equals("")) {
                        if (objList.getSelectedRow() > -1) {
                            int pontos[] = new int[3], linhas[][] = new int[3][3], polilinhas[][], poligonos[][], controle = 0;
                            double escalonamento[][] = {{Double.parseDouble(vlrZoomObjX.getText()), 0, 0}, {0, Double.parseDouble(vlrZoomObjY.getText()), 0}, {0, 0, 1}};
                            for (Ponto ponto : DesenhaObjetos.pontos) {
                                if (ponto.getNome().equals(objList.getValueAt(objList.getSelectedRow(), 1))) {
                                    double[] matriz_p = {ponto.getX(), ponto.getY(), 1.00};
                                    pontos[0] = (int) ((matriz_p[0] * escalonamento[0][0]) + (matriz_p[1] * escalonamento[1][0]) + (matriz_p[2] * escalonamento[2][0]));
                                    pontos[1] = (int) ((matriz_p[0] * escalonamento[0][1]) + (matriz_p[1] * escalonamento[1][1]) + (matriz_p[2] * escalonamento[2][1]));
                                    pontos[2] = (int) ((matriz_p[0] * escalonamento[0][2]) + (matriz_p[1] * escalonamento[1][2]) + (matriz_p[2] * escalonamento[2][2]));
                                    ponto.setX(pontos[0]);
                                    ponto.setY(pontos[1]);
                                }
                            }
                            System.out.println("Redimensionou Pontos");
                            for (Linha linha1 : DesenhaObjetos.linhas) {
                                if (linha1.getNome().equals(objList.getValueAt(objList.getSelectedRow(), 1))) {
                                    double[] matriz_p1 = {linha1.getP1().getX(), linha1.getP1().getY(), 1.00};
                                    double[] matriz_p2 = {linha1.getP2().getX(), linha1.getP2().getY(), 1.00};
                                    if (controle == 0) {
                                        linhas[0][0] = (int) ((matriz_p1[0] * escalonamento[0][0]) + (matriz_p1[1] * escalonamento[1][0]) + (matriz_p1[2] * escalonamento[2][0]));
                                        linhas[0][1] = (int) ((matriz_p1[0] * escalonamento[0][1]) + (matriz_p1[1] * escalonamento[1][1]) + (matriz_p1[2] * escalonamento[2][1]));
                                        linhas[0][2] = (int) ((matriz_p1[0] * escalonamento[0][2]) + (matriz_p1[1] * escalonamento[1][2]) + (matriz_p1[2] * escalonamento[2][2]));
                                    }
                                    linhas[1][0] = (int) ((matriz_p2[0] * escalonamento[0][0]) + (matriz_p2[1] * escalonamento[1][0]) + (matriz_p2[2] * escalonamento[2][0]));
                                    linhas[1][1] = (int) ((matriz_p2[0] * escalonamento[0][1]) + (matriz_p2[1] * escalonamento[1][1]) + (matriz_p2[2] * escalonamento[2][1]));
                                    linhas[1][2] = (int) ((matriz_p2[0] * escalonamento[0][2]) + (matriz_p2[1] * escalonamento[1][2]) + (matriz_p2[2] * escalonamento[2][2]));
                                    if (controle == 0) {
                                        linha1.getP1().setX(linhas[0][0]);
                                        linha1.getP1().setY(linhas[0][1]);
                                    }
                                    linha1.getP2().setX(linhas[1][0]);
                                    linha1.getP2().setY(linhas[1][1]);
                                }
                            }
                            System.out.println("Redimensionou Linhas");
                            for (Polilinha polilinha1 : DesenhaObjetos.polilinhas) {
                                polilinhas = new int[polilinha1.getPontosPolilinha().size()][3];
                                if (polilinha1.getNome().equals(objList.getValueAt(objList.getSelectedRow(), 1))) {
                                    for (int i = controle; i < polilinha1.getPontosPolilinha().size(); i++) {
                                        double[] matriz_p = {polilinha1.getPontosPolilinha().get(i).getX(), polilinha1.getPontosPolilinha().get(i).getY(), 1.00};
                                        polilinhas[i][0] = (int) ((matriz_p[0] * escalonamento[0][0]) + (matriz_p[1] * escalonamento[1][0]) + (matriz_p[2] * escalonamento[2][0]));
                                        polilinhas[i][1] = (int) ((matriz_p[0] * escalonamento[0][1]) + (matriz_p[1] * escalonamento[1][1]) + (matriz_p[2] * escalonamento[2][1]));
                                        polilinhas[i][2] = (int) ((matriz_p[0] * escalonamento[0][2]) + (matriz_p[1] * escalonamento[1][2]) + (matriz_p[2] * escalonamento[2][2]));
                                        polilinha1.getPontosPolilinha().get(i).setX(polilinhas[i][0]);
                                        polilinha1.getPontosPolilinha().get(i).setY(polilinhas[i][1]);
                                    }
                                }
                            }
                            System.out.println("Redimensionou Polilinhas");
                            for (Poligono poligono1 : DesenhaObjetos.poligonos) {
                                poligonos = new int[poligono1.getPontosPoligono().size()][3];
                                if (poligono1.getNome().equals(objList.getValueAt(objList.getSelectedRow(), 1))) {
                                    for (int i = controle; i < poligono1.getPontosPoligono().size(); i++) {
                                        double[] matriz_p = {poligono1.getPontosPoligono().get(i).getX(), poligono1.getPontosPoligono().get(i).getY(), 1.00};
                                        poligonos[i][0] = (int) ((matriz_p[0] * escalonamento[0][0]) + (matriz_p[1] * escalonamento[1][0]) + (matriz_p[2] * escalonamento[2][0]));
                                        poligonos[i][1] = (int) ((matriz_p[0] * escalonamento[0][1]) + (matriz_p[1] * escalonamento[1][1]) + (matriz_p[2] * escalonamento[2][1]));
                                        poligonos[i][2] = (int) ((matriz_p[0] * escalonamento[0][2]) + (matriz_p[1] * escalonamento[1][2]) + (matriz_p[2] * escalonamento[2][2]));
                                        if (controle == 1) {
                                            if (i + 1 == (poligono1.getPontosPoligono().size())) {
                                                break;
                                            }
                                        }
                                        poligono1.getPontosPoligono().get(i).setX(poligonos[i][0]);
                                        poligono1.getPontosPoligono().get(i).setY(poligonos[i][1]);
                                    }
                                }
                            }
                            System.out.println("Redimensionou Poligono");
                            DesenhaObjetos.updateList();
                            DesenhaObjetos.desenhaObjetos((Graphics2D) painelPintura.getGraphics());
                            System.out.println("REDIMENSINOU PELO CENTRO");
                        } else {
                            JOptionPane.showConfirmDialog(null, "Selecione um objeto!", "", JOptionPane.PLAIN_MESSAGE);
                        }
                    } else {
                        JOptionPane.showConfirmDialog(null, "Preencha os valores de aspecto!", "", JOptionPane.PLAIN_MESSAGE);
                    }
                } catch (Exception e) {
                    System.out.println(e);
                }
            } else {
                //MATRIZ SEM ORIGEM
                try {
                    if (!vlrZoomObjX.getText().equals("") && !vlrZoomObjY.getText().equals("")) {
                        if (objList.getSelectedRow() > -1) {
                            double escalonamento[][] = {{Double.parseDouble(vlrZoomObjX.getText()), 0, 0}, {0, Double.parseDouble(vlrZoomObjY.getText()), 0}, {0, 0, 1}};
                            int pontos[] = new int[3];
                            int linhas[][] = new int[3][3];
                            int polilinhas[][];
                            int poligonos[][];
                            int x = objList.getSelectedRow();
                            for (int j = 0; j < DesenhaObjetos.pontos.size(); j++) {
                                if (DesenhaObjetos.pontos.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                    double matriz_ponto[] = {DesenhaObjetos.pontos.get(j).getX(), DesenhaObjetos.pontos.get(j).getY(), 1.00};
                                    pontos[0] = (int) ((matriz_ponto[0] * escalonamento[0][0])
                                            + (matriz_ponto[1] * escalonamento[1][0])
                                            + (matriz_ponto[2] * escalonamento[2][0]));
                                    pontos[1] = (int) ((matriz_ponto[0] * escalonamento[0][1])
                                            + (matriz_ponto[1] * escalonamento[1][1])
                                            + (matriz_ponto[2] * escalonamento[2][1]));
                                    pontos[2] = (int) ((matriz_ponto[0] * escalonamento[0][2])
                                            + (matriz_ponto[1] * escalonamento[1][2])
                                            + (matriz_ponto[2] * escalonamento[2][2]));
                                    DesenhaObjetos.pontos.get(j).setX(pontos[0]);
                                    DesenhaObjetos.pontos.get(j).setY(pontos[1]);
                                }
                                System.out.println("Redimensionou Pontos");
                            }
                            for (int j = 0; j < DesenhaObjetos.linhas.size(); j++) {
                                if (DesenhaObjetos.linhas.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                    double matriz_linha_p1[] = {DesenhaObjetos.linhas.get(j).getP1().getX(), DesenhaObjetos.linhas.get(j).getP1().getY(), 1.00};
                                    double matriz_linha_p2[] = {DesenhaObjetos.linhas.get(j).getP2().getX(), DesenhaObjetos.linhas.get(j).getP2().getY(), 1.00};
                                    linhas[0][0] = (int) ((matriz_linha_p1[0] * escalonamento[0][0])
                                            + (matriz_linha_p1[1] * escalonamento[1][0])
                                            + (matriz_linha_p1[2] * escalonamento[2][0]));
                                    linhas[0][1] = (int) ((matriz_linha_p1[0] * escalonamento[0][1])
                                            + (matriz_linha_p1[1] * escalonamento[1][1])
                                            + (matriz_linha_p1[2] * escalonamento[2][1]));
                                    linhas[0][2] = (int) ((matriz_linha_p1[0] * escalonamento[0][2])
                                            + (matriz_linha_p1[1] * escalonamento[1][2])
                                            + (matriz_linha_p1[2] * escalonamento[2][2]));
                                    linhas[1][0] = (int) ((matriz_linha_p2[0] * escalonamento[0][0])
                                            + (matriz_linha_p2[1] * escalonamento[1][0])
                                            + (matriz_linha_p2[2] * escalonamento[2][0]));
                                    linhas[1][1] = (int) ((matriz_linha_p2[0] * escalonamento[0][1])
                                            + (matriz_linha_p2[1] * escalonamento[1][1])
                                            + (matriz_linha_p2[2] * escalonamento[2][1]));
                                    linhas[1][2] = (int) ((matriz_linha_p2[0] * escalonamento[0][2])
                                            + (matriz_linha_p2[1] * escalonamento[1][2])
                                            + (matriz_linha_p2[2] * escalonamento[2][2]));
                                    DesenhaObjetos.linhas.get(j).getP1().setX(linhas[0][0]);
                                    DesenhaObjetos.linhas.get(j).getP1().setY(linhas[0][1]);
                                    DesenhaObjetos.linhas.get(j).getP2().setX(linhas[1][0]);
                                    DesenhaObjetos.linhas.get(j).getP2().setY(linhas[1][1]);
                                }
                                System.out.println("Redimensionou Linhas");
                            }
                            for (int j = 0; j < DesenhaObjetos.polilinhas.size(); j++) {
                                polilinhas = new int[DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().size()][3];
                                if (DesenhaObjetos.polilinhas.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                    for (int i = 0; i < DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().size(); i++) {
                                        double matriz_polilinha_ponto[] = {DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).getX(), DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).getY(), 1.00};
                                        polilinhas[i][0] = (int) ((matriz_polilinha_ponto[0] * escalonamento[0][0])
                                                + (matriz_polilinha_ponto[1] * escalonamento[1][0])
                                                + (matriz_polilinha_ponto[2] * escalonamento[2][0]));
                                        polilinhas[i][1] = (int) ((matriz_polilinha_ponto[0] * escalonamento[0][1])
                                                + (matriz_polilinha_ponto[1] * escalonamento[1][1])
                                                + (matriz_polilinha_ponto[2] * escalonamento[2][1]));
                                        polilinhas[i][2] = (int) ((matriz_polilinha_ponto[0] * escalonamento[0][2])
                                                + (matriz_polilinha_ponto[1] * escalonamento[1][2])
                                                + (matriz_polilinha_ponto[2] * escalonamento[2][2]));
                                        DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).setX(polilinhas[i][0]);
                                        DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).setY(polilinhas[i][1]);
                                    }
                                }
                                System.out.println("Redimensionou Polilinhas");
                            }
                            for (int j = 0; j < DesenhaObjetos.poligonos.size(); j++) {
                                poligonos = new int[DesenhaObjetos.poligonos.get(j).getPontosPoligono().size()][3];
                                if (DesenhaObjetos.poligonos.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                    for (int i = 0; i < DesenhaObjetos.poligonos.get(j).getPontosPoligono().size(); i++) {
                                        double matriz_poligono_ponto[] = {DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).getX(), DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).getY(), 1.00};
                                        poligonos[i][0] = (int) ((matriz_poligono_ponto[0] * escalonamento[0][0])
                                                + (matriz_poligono_ponto[1] * escalonamento[1][0])
                                                + (matriz_poligono_ponto[2] * escalonamento[2][0]));
                                        poligonos[i][1] = (int) ((matriz_poligono_ponto[0] * escalonamento[0][1])
                                                + (matriz_poligono_ponto[1] * escalonamento[1][1])
                                                + (matriz_poligono_ponto[2] * escalonamento[2][1]));
                                        poligonos[i][2] = (int) ((matriz_poligono_ponto[0] * escalonamento[0][2])
                                                + (matriz_poligono_ponto[1] * escalonamento[1][2])
                                                + (matriz_poligono_ponto[2] * escalonamento[2][2]));
                                        DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).setX(poligonos[i][0]);
                                        DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).setY(poligonos[i][1]);
                                    }
                                }
                                System.out.println("Redimensionou Poligonos");
                            }
                            System.out.println("REDIMENSIONOU POR MATRIZ");
                            DesenhaObjetos.updateList();
                            DesenhaObjetos.desenhaObjetos((Graphics2D) painelPintura.getGraphics());
                            vlrZoomObjX.setText("");
                            vlrZoomObjY.setText("");
                        } else {
                            JOptionPane.showConfirmDialog(null, "Selecione um objeto!", "", JOptionPane.PLAIN_MESSAGE);
                        }
                    } else {
                        JOptionPane.showConfirmDialog(null, "Preencha os valores de aspecto!", "", JOptionPane.PLAIN_MESSAGE);
                    }
                } catch (Exception e) {
                    System.out.println(e);
                }
            }
        } else {
            try {
                if (!vlrZoomObjX.getText().equals("") && !vlrZoomObjY.getText().equals("")) {
                    if (objList.getSelectedRow() > -1) {
                        double calculaaspecto = 0.00;
                        int x = objList.getSelectedRow();
                        for (int j = 0; j < DesenhaObjetos.pontos.size(); j++) {
                            if (DesenhaObjetos.pontos.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                calculaaspecto = DesenhaObjetos.pontos.get(j).getX() * Double.parseDouble(vlrZoomObjX.getText());
                                DesenhaObjetos.pontos.get(j).setX((int) calculaaspecto);
                                calculaaspecto = DesenhaObjetos.pontos.get(j).getY() * Double.parseDouble(vlrZoomObjY.getText());
                                DesenhaObjetos.pontos.get(j).setY((int) calculaaspecto);
                            }
                        }
                        System.out.println("Redimensionou Pontos");

                        for (int j = 0; j < DesenhaObjetos.linhas.size(); j++) {
                            if (DesenhaObjetos.linhas.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                calculaaspecto = DesenhaObjetos.linhas.get(j).getP1().getX() * Double.parseDouble(vlrZoomObjX.getText());
                                DesenhaObjetos.linhas.get(j).getP1().setX((int) calculaaspecto);
                                calculaaspecto = DesenhaObjetos.linhas.get(j).getP1().getY() * Double.parseDouble(vlrZoomObjY.getText());
                                DesenhaObjetos.linhas.get(j).getP1().setY((int) calculaaspecto);
                                calculaaspecto = DesenhaObjetos.linhas.get(j).getP2().getX() * Double.parseDouble(vlrZoomObjX.getText());
                                DesenhaObjetos.linhas.get(j).getP2().setX((int) calculaaspecto);
                                calculaaspecto = DesenhaObjetos.linhas.get(j).getP2().getY() * Double.parseDouble(vlrZoomObjY.getText());
                                DesenhaObjetos.linhas.get(j).getP2().setY((int) calculaaspecto);
                            }
                        }
                        System.out.println("Redimensionou Linhas");
                        for (int j = 0; j < DesenhaObjetos.polilinhas.size(); j++) {
                            if (DesenhaObjetos.polilinhas.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                for (int i = 0; i < DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().size(); i++) {
                                    calculaaspecto = DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).getX() * Double.parseDouble(vlrZoomObjX.getText());
                                    DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).setX((int) calculaaspecto);
                                    calculaaspecto = DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).getY() * Double.parseDouble(vlrZoomObjY.getText());
                                    DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).setY((int) calculaaspecto);
                                }
                            }
                        }
                        System.out.println("Redimensionou Polilinhas");
                        for (int j = 0; j < DesenhaObjetos.poligonos.size(); j++) {
                            if (DesenhaObjetos.poligonos.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                for (int i = 0; i < DesenhaObjetos.poligonos.get(j).getPontosPoligono().size(); i++) {
                                    calculaaspecto = DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).getX() * Double.parseDouble(vlrZoomObjX.getText());
                                    DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).setX((int) calculaaspecto);
                                    calculaaspecto = DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).getY() * Double.parseDouble(vlrZoomObjY.getText());
                                    DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).setY((int) calculaaspecto);
                                }
                            }
                            System.out.println("Redimensionou Poligonos");
                        }
                        System.out.println("REDIMENSIONOU SEM MATRIZ!");
                        DesenhaObjetos.updateList();
                        DesenhaObjetos.desenhaObjetos((Graphics2D) painelPintura.getGraphics());
                        vlrZoomObjX.setText("");
                        vlrZoomObjY.setText("");
                    } else {
                        JOptionPane.showConfirmDialog(null, "Selecione um objeto!", "", JOptionPane.PLAIN_MESSAGE);
                    }
                } else {
                    JOptionPane.showConfirmDialog(null, "Preencha os valores de aspecto!", "", JOptionPane.PLAIN_MESSAGE);
                }
            } catch (Exception e) {
                System.out.println(e);
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_RedimensionarObjActionPerformed

    private void bAntiHorarioObjetoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAntiHorarioObjetoActionPerformed
        if (operaMatriz.isSelected()) {
            if (rotacionaemPonto.isSelected()) {
                //OPERA MATRIZ COM PONTO
                if (!vlrRotacObj.getText().equals("")) {
                    if (Integer.parseInt(vlrRotacObj.getText()) >= 0) {
                        if (objList.getSelectedRow() > -1) {
                            int x = objList.getSelectedRow();
                            double intemradiano = toRadians(Double.parseDouble(vlrRotacObj.getText()));
                            //NAO ESQUECER MEXER NESSE SIN, É NO OUTRO DE CIMA
                            //NAO MEXI
                            double rotacao[][] = {{cos(intemradiano), sin(intemradiano), 0}, {-sin(intemradiano), cos(intemradiano), 0}, {Integer.valueOf(vlrXPontoRotacObj.getText()), Integer.valueOf(vlrYPontoRotacObj.getText()), 0}};
                            int linhas[][] = new int[3][3];
                            int polilinhas[][];
                            int poligonos[][];
                            try {
                                for (int j = 0; j < DesenhaObjetos.pontos.size(); j++) {
                                    if (DesenhaObjetos.pontos.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                        System.out.println("#");
                                    }
                                    System.out.println("Rotacionou pontos");
                                }
                                for (int j = 0; j < DesenhaObjetos.linhas.size(); j++) {
                                    if (DesenhaObjetos.linhas.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                        double matriz_linha_p1[] = {DesenhaObjetos.linhas.get(j).getP1().getX(), DesenhaObjetos.linhas.get(j).getP1().getY(), 1.00};
                                        double matriz_linha_p2[] = {DesenhaObjetos.linhas.get(j).getP2().getX(), DesenhaObjetos.linhas.get(j).getP2().getY(), 1.00};
                                        linhas[0][0] = (int) ((matriz_linha_p1[0] * rotacao[0][0])
                                                + (matriz_linha_p1[1] * rotacao[1][0])
                                                + (matriz_linha_p1[2] * rotacao[2][0]));
                                        linhas[0][1] = (int) ((matriz_linha_p1[0] * rotacao[0][1])
                                                + (matriz_linha_p1[1] * rotacao[1][1])
                                                + (matriz_linha_p1[2] * rotacao[2][1]));
                                        linhas[0][2] = (int) ((matriz_linha_p1[0] * rotacao[0][2])
                                                + (matriz_linha_p1[1] * rotacao[1][2])
                                                + (matriz_linha_p1[2] * rotacao[2][2]));
                                        linhas[1][0] = (int) ((matriz_linha_p2[0] * rotacao[0][0])
                                                + (matriz_linha_p2[1] * rotacao[1][0])
                                                + (matriz_linha_p2[2] * rotacao[2][0]));
                                        linhas[1][1] = (int) ((matriz_linha_p2[0] * rotacao[0][1])
                                                + (matriz_linha_p2[1] * rotacao[1][1])
                                                + (matriz_linha_p2[2] * rotacao[2][1]));
                                        linhas[1][2] = (int) ((matriz_linha_p2[0] * rotacao[0][2])
                                                + (matriz_linha_p2[1] * rotacao[1][2])
                                                + (matriz_linha_p2[2] * rotacao[2][2]));
                                        DesenhaObjetos.linhas.get(j).getP1().setX(linhas[0][0]);
                                        DesenhaObjetos.linhas.get(j).getP1().setY(linhas[0][1]);
                                        DesenhaObjetos.linhas.get(j).getP2().setX(linhas[1][0]);
                                        DesenhaObjetos.linhas.get(j).getP2().setY(linhas[1][1]);
                                    }
                                    System.out.println("Rotacionou linhas");
                                }

                                for (int j = 0; j < DesenhaObjetos.polilinhas.size(); j++) {
                                    polilinhas = new int[DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().size()][3];

                                    if (DesenhaObjetos.polilinhas.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                        for (int i = 0; i < DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().size(); i++) {

                                            double matriz_polilinha_ponto[] = {DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).getX(), DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).getY(), 1.00};

                                            polilinhas[i][0] = (int) ((matriz_polilinha_ponto[0] * rotacao[0][0])
                                                    + (matriz_polilinha_ponto[1] * rotacao[1][0])
                                                    + (matriz_polilinha_ponto[2] * rotacao[2][0]));
                                            polilinhas[i][1] = (int) ((matriz_polilinha_ponto[0] * rotacao[0][1])
                                                    + (matriz_polilinha_ponto[1] * rotacao[1][1])
                                                    + (matriz_polilinha_ponto[2] * rotacao[2][1]));
                                            polilinhas[i][2] = (int) ((matriz_polilinha_ponto[0] * rotacao[0][2])
                                                    + (matriz_polilinha_ponto[1] * rotacao[1][2])
                                                    + (matriz_polilinha_ponto[2] * rotacao[2][2]));

                                            DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).setX(polilinhas[i][0]);
                                            DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).setY(polilinhas[i][1]);

                                        }
                                    }
                                    System.out.println("Rotacionou polilinhas");
                                }

                                for (int j = 0; j < DesenhaObjetos.poligonos.size(); j++) {
                                    poligonos = new int[DesenhaObjetos.poligonos.get(j).getPontosPoligono().size()][3];
                                    if (DesenhaObjetos.poligonos.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                        for (int i = 0; i < DesenhaObjetos.poligonos.get(j).getPontosPoligono().size(); i++) {
                                            double matriz_poligono_ponto[] = {DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).getX(), DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).getY(), 1.00};
                                            poligonos[i][0] = (int) ((matriz_poligono_ponto[0] * rotacao[0][0])
                                                    + (matriz_poligono_ponto[1] * rotacao[1][0])
                                                    + (matriz_poligono_ponto[2] * rotacao[2][0]));
                                            poligonos[i][1] = (int) ((matriz_poligono_ponto[0] * rotacao[0][1])
                                                    + (matriz_poligono_ponto[1] * rotacao[1][1])
                                                    + (matriz_poligono_ponto[2] * rotacao[2][1]));
                                            poligonos[i][2] = (int) ((matriz_poligono_ponto[0] * rotacao[0][2])
                                                    + (matriz_poligono_ponto[1] * rotacao[1][2])
                                                    + (matriz_poligono_ponto[2] * rotacao[2][2]));
                                            DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).setX(poligonos[i][0]);
                                            DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).setY(poligonos[i][1]);
                                        }
                                    }
                                    System.out.println("Rotacionou poligonos");
                                }
                            } catch (Exception e) {
                                System.out.println(e);
                            }
                            rotacao = null;
                            System.out.println("ROTACIONOU POR MATRIZ COM PONTO");
                            vlrXPontoRotacObj.setText("0");
                            vlrYPontoRotacObj.setText("0");
                            DesenhaObjetos.updateList();
                            DesenhaObjetos.desenhaObjetos((Graphics2D) painelPintura.getGraphics());
                        } else {
                            JOptionPane.showConfirmDialog(null, "Selecione um objeto!", "", JOptionPane.PLAIN_MESSAGE);
                        }
                    } else {
                        JOptionPane.showConfirmDialog(null, "Apenas valores maiores que 0!", "", JOptionPane.PLAIN_MESSAGE);
                    }
                } else {
                    JOptionPane.showConfirmDialog(null, "Preencha o grau de rotação!", "", JOptionPane.PLAIN_MESSAGE);
                }
            }
            if (rotacionanoCentro.isSelected()) {
                try {
                    if (!vlrRotacObj.getText().equals("")) {
                        if (Integer.parseInt(vlrRotacObj.getText()) >= 0) {
                            if (objList.getSelectedRow() > -1) {
                                int vlr_x = 0, vlr_y = 0, linha, coluna, t, produto = 0;
                                double intemradiano = toRadians(Double.parseDouble(vlrRotacObj.getText()));
                                double rotacao[][] = {{cos(intemradiano), sin(intemradiano), 0}, {-sin(intemradiano), cos(intemradiano), 0}, {0, 0, 1}};
                                int matriz_a[][], matriz_b[][], matriz1[][] = new int[1][3], matriz2[][] = new int[3][3], matriz3[][] = new int[1][3];
                                int a_auxiliar[][] = {{1, 0, 0}, {0, 1, 0}, {-(vlr_x), -(vlr_y), 1}};
                                int b_auxiliar[][] = {{1, 0, 0}, {0, 1, 0}, {vlr_x, vlr_y, 1}};
                                matriz_a = a_auxiliar;
                                matriz_b = b_auxiliar;

                                for (linha = 0; linha < 3; linha++) {
                                    for (coluna = 0; coluna < 3; coluna++) {
                                        produto = 0;
                                        for (t = 0; t < 3; t++) {
                                            produto += matriz_a[linha][t] * rotacao[t][coluna];
                                        }
                                        matriz2[linha][coluna] = produto;
                                    }
                                }
                                for (linha = 0; linha < 3; linha++) {
                                    for (coluna = 0; coluna < 3; coluna++) {
                                        produto = 0;
                                        for (t = 0; t < 3; t++) {
                                            produto += matriz2[linha][t] * matriz_b[t][coluna];
                                        }
                                        matriz2[linha][coluna] = produto;
                                    }
                                }
                                for (Ponto ponto : DesenhaObjetos.pontos) {
                                    if (ponto.getNome().equals(objList.getValueAt(objList.getSelectedRow(), 1))) {
                                        matriz1[0][0] = ponto.getX();
                                        matriz1[0][1] = ponto.getY();
                                        matriz1[0][2] = 1;
                                        for (coluna = 0; coluna < 3; coluna++) {
                                            produto = 0;
                                            for (t = 0; t < 3; t++) {
                                                produto += matriz1[0][t] * matriz2[t][coluna];
                                            }
                                            matriz3[0][coluna] = produto;
                                        }
                                        ponto.setX(matriz3[0][0]);
                                        ponto.setY(matriz3[0][1]);
                                    }
                                }
                                System.out.println("Rotacionou pontos");
                                for (Linha linha1 : DesenhaObjetos.linhas) {
                                    if (linha1.getNome().equals(objList.getValueAt(objList.getSelectedRow(), 1))) {
                                        matriz1[0][0] = linha1.getP1().getX();
                                        matriz1[0][1] = linha1.getP1().getY();
                                        matriz1[0][2] = 1;
                                        for (coluna = 0; coluna < 3; coluna++) {
                                            produto = 0;
                                            for (t = 0; t < 3; t++) {
                                                produto += matriz1[0][t] * matriz2[t][coluna];
                                            }
                                            matriz3[0][coluna] = produto;
                                        }
                                        linha1.getP1().setX(matriz3[0][0]);
                                        linha1.getP1().setY(matriz3[0][1]);
                                        matriz1[0][0] = linha1.getP2().getX();
                                        matriz1[0][1] = linha1.getP2().getY();
                                        matriz1[0][2] = 1;
                                        for (coluna = 0; coluna < 3; coluna++) {
                                            produto = 0;
                                            for (t = 0; t < 3; t++) {
                                                produto += matriz1[0][t] * matriz2[t][coluna];
                                            }
                                            matriz3[0][coluna] = produto;
                                        }
                                        linha1.getP2().setX(matriz3[0][0]);
                                        linha1.getP2().setY(matriz3[0][1]);
                                    }
                                }
                                System.out.println("Rotacionou linhas");
                                for (Polilinha polilinha1 : DesenhaObjetos.polilinhas) {
                                    if (polilinha1.getNome().equals(objList.getValueAt(objList.getSelectedRow(), 1))) {
                                        for (int r = 0; r < polilinha1.getPontosPolilinha().size(); r++) {
                                            matriz1[0][0] = polilinha1.getPontosPolilinha().get(r).getX();
                                            matriz1[0][1] = polilinha1.getPontosPolilinha().get(r).getY();
                                            matriz1[0][2] = 1;
                                            for (coluna = 0; coluna < 3; coluna++) {
                                                produto = 0;
                                                for (t = 0; t < 3; t++) {
                                                    produto += matriz1[0][t] * matriz2[t][coluna];
                                                }
                                                matriz3[0][coluna] = produto;
                                            }
                                            polilinha1.getPontosPolilinha().get(r).setX(matriz3[0][0]);
                                            polilinha1.getPontosPolilinha().get(r).setY(matriz3[0][1]);
                                        }
                                    }
                                }
                                System.out.println("Rotacionou polilinhas");
                                for (Poligono poligono1 : DesenhaObjetos.poligonos) {
                                    if (poligono1.getNome().equals(objList.getValueAt(objList.getSelectedRow(), 1))) {
                                        for (int r = 0; r < poligono1.getPontosPoligono().size(); r++) {
                                            matriz1[0][0] = poligono1.getPontosPoligono().get(r).getX();
                                            matriz1[0][1] = poligono1.getPontosPoligono().get(r).getY();
                                            matriz1[0][2] = 1;
                                            for (coluna = 0; coluna < 3; coluna++) {
                                                produto = 0;
                                                for (t = 0; t < 3; t++) {
                                                    produto += matriz1[0][t] * matriz2[t][coluna];
                                                }
                                                matriz3[0][coluna] = produto;
                                            }
                                            poligono1.getPontosPoligono().get(r).setX(matriz3[0][0]);
                                            poligono1.getPontosPoligono().get(r).setY(matriz3[0][1]);
                                        }
                                    }
                                }
                                System.out.println("Rotacionou poligonos");
                                DesenhaObjetos.updateList();
                                DesenhaObjetos.desenhaObjetos((Graphics2D) painelPintura.getGraphics());
                                System.out.println("ROTACIONOU CENTRO");
                            } else {
                                JOptionPane.showConfirmDialog(null, "Selecione um objeto!", "", JOptionPane.PLAIN_MESSAGE);
                            }
                        } else {
                            JOptionPane.showConfirmDialog(null, "Apenas valores maiores que 0!", "", JOptionPane.PLAIN_MESSAGE);
                        }
                    } else {
                        JOptionPane.showConfirmDialog(null, "Preencha o grau de rotação!", "", JOptionPane.PLAIN_MESSAGE);
                    }
                } catch (Exception e) {
                    System.out.println(e);
                }
            } else {
                if (!vlrRotacObj.getText().equals("")) {
                    if (Integer.parseInt(vlrRotacObj.getText()) >= 0) {
                        if (objList.getSelectedRow() > -1) {
                            int x = objList.getSelectedRow();
                            double intemradiano = toRadians(Double.parseDouble(vlrRotacObj.getText()));
                            //NAO ESQUECER DE MUDAR O SIN
                            //BELEZA, NAO ESQUECI
                            double rotacao[][] = {{cos(intemradiano), sin(intemradiano), 0}, {-sin(intemradiano), cos(intemradiano), 0}, {0, 0, 1}};
                            int linhas[][] = new int[3][3];
                            int polilinhas[][];
                            int poligonos[][];
                            try {
                                for (int j = 0; j < DesenhaObjetos.pontos.size(); j++) {
                                    if (DesenhaObjetos.pontos.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                        System.out.println("#");
                                    }
                                    System.out.println("Rotacionou pontos");
                                }
                                for (int j = 0; j < DesenhaObjetos.linhas.size(); j++) {
                                    if (DesenhaObjetos.linhas.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                        double matriz_linha_p1[] = {DesenhaObjetos.linhas.get(j).getP1().getX(), DesenhaObjetos.linhas.get(j).getP1().getY(), 1.00};
                                        double matriz_linha_p2[] = {DesenhaObjetos.linhas.get(j).getP2().getX(), DesenhaObjetos.linhas.get(j).getP2().getY(), 1.00};
                                        linhas[0][0] = (int) ((matriz_linha_p1[0] * rotacao[0][0])
                                                + (matriz_linha_p1[1] * rotacao[1][0])
                                                + (matriz_linha_p1[2] * rotacao[2][0]));
                                        linhas[0][1] = (int) ((matriz_linha_p1[0] * rotacao[0][1])
                                                + (matriz_linha_p1[1] * rotacao[1][1])
                                                + (matriz_linha_p1[2] * rotacao[2][1]));
                                        linhas[0][2] = (int) ((matriz_linha_p1[0] * rotacao[0][2])
                                                + (matriz_linha_p1[1] * rotacao[1][2])
                                                + (matriz_linha_p1[2] * rotacao[2][2]));
                                        linhas[1][0] = (int) ((matriz_linha_p2[0] * rotacao[0][0])
                                                + (matriz_linha_p2[1] * rotacao[1][0])
                                                + (matriz_linha_p2[2] * rotacao[2][0]));
                                        linhas[1][1] = (int) ((matriz_linha_p2[0] * rotacao[0][1])
                                                + (matriz_linha_p2[1] * rotacao[1][1])
                                                + (matriz_linha_p2[2] * rotacao[2][1]));
                                        linhas[1][2] = (int) ((matriz_linha_p2[0] * rotacao[0][2])
                                                + (matriz_linha_p2[1] * rotacao[1][2])
                                                + (matriz_linha_p2[2] * rotacao[2][2]));

                                        DesenhaObjetos.linhas.get(j).getP1().setX(linhas[1][0]);
                                        DesenhaObjetos.linhas.get(j).getP1().setY(linhas[1][1]);
                                        DesenhaObjetos.linhas.get(j).getP2().setX(linhas[0][0]);
                                        DesenhaObjetos.linhas.get(j).getP2().setY(linhas[0][1]);
                                        /*DesenhaObjetos.linhas.get(j).getP1().setX(linhas[0][1]);
                                         DesenhaObjetos.linhas.get(j).getP1().setY(linhas[0][0]);
                                         DesenhaObjetos.linhas.get(j).getP2().setX(linhas[1][1]);
                                         DesenhaObjetos.linhas.get(j).getP2().setY(linhas[1][0]);
                                    
                                    
                                         DesenhaObjetos.linhas.get(j).getP1().setX(linhas[0][0]);
                                         DesenhaObjetos.linhas.get(j).getP1().setY(linhas[0][1]);
                                         DesenhaObjetos.linhas.get(j).getP2().setX(linhas[1][0]);
                                         DesenhaObjetos.linhas.get(j).getP2().setY(linhas[1][1]);*/
                                    }
                                    System.out.println("Rotacionou linhas");
                                }
                                for (int j = 0; j < DesenhaObjetos.polilinhas.size(); j++) {
                                    polilinhas = new int[DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().size()][3];
                                    if (DesenhaObjetos.polilinhas.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                        for (int i = 0; i < DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().size(); i++) {
                                            double matriz_polilinha_ponto[] = {DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).getX(), DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).getY(), 1.00};
                                            polilinhas[i][0] = (int) ((matriz_polilinha_ponto[0] * rotacao[0][0])
                                                    + (matriz_polilinha_ponto[1] * rotacao[1][0])
                                                    + (matriz_polilinha_ponto[2] * rotacao[2][0]));
                                            polilinhas[i][1] = (int) ((matriz_polilinha_ponto[0] * rotacao[0][1])
                                                    + (matriz_polilinha_ponto[1] * rotacao[1][1])
                                                    + (matriz_polilinha_ponto[2] * rotacao[2][1]));
                                            polilinhas[i][2] = (int) ((matriz_polilinha_ponto[0] * rotacao[0][2])
                                                    + (matriz_polilinha_ponto[1] * rotacao[1][2])
                                                    + (matriz_polilinha_ponto[2] * rotacao[2][2]));
                                            DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).setX(polilinhas[i][0]);
                                            DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).setY(polilinhas[i][1]);
                                        }
                                    }
                                    System.out.println("Rotacionou polilinhas");
                                }
                                for (int j = 0; j < DesenhaObjetos.poligonos.size(); j++) {
                                    poligonos = new int[DesenhaObjetos.poligonos.get(j).getPontosPoligono().size()][3];
                                    if (DesenhaObjetos.poligonos.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                        for (int i = 0; i < DesenhaObjetos.poligonos.get(j).getPontosPoligono().size(); i++) {
                                            double matriz_poligono_ponto[] = {DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).getX(), DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).getY(), 1.00};
                                            poligonos[i][0] = (int) ((matriz_poligono_ponto[0] * rotacao[0][0])
                                                    + (matriz_poligono_ponto[1] * rotacao[1][0])
                                                    + (matriz_poligono_ponto[2] * rotacao[2][0]));
                                            poligonos[i][1] = (int) ((matriz_poligono_ponto[0] * rotacao[0][1])
                                                    + (matriz_poligono_ponto[1] * rotacao[1][1])
                                                    + (matriz_poligono_ponto[2] * rotacao[2][1]));
                                            poligonos[i][2] = (int) ((matriz_poligono_ponto[0] * rotacao[0][2])
                                                    + (matriz_poligono_ponto[1] * rotacao[1][2])
                                                    + (matriz_poligono_ponto[2] * rotacao[2][2]));
                                            DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).setX(poligonos[i][0]);
                                            DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).setY(poligonos[i][1]);
                                        }
                                    }
                                    System.out.println("Rotacionou poligonos");
                                }
                                System.out.println("ROTACIONOU POR MATRIZ");
                            } catch (Exception e) {
                                System.out.println(e);
                            }
                            DesenhaObjetos.updateList();
                            DesenhaObjetos.desenhaObjetos((Graphics2D) painelPintura.getGraphics());
                        } else {
                            JOptionPane.showConfirmDialog(null, "Selecione um objeto!", "", JOptionPane.PLAIN_MESSAGE);
                        }
                    } else {
                        JOptionPane.showConfirmDialog(null, "Apenas valores maiores que 0!", "", JOptionPane.PLAIN_MESSAGE);
                    }
                } else {
                    JOptionPane.showConfirmDialog(null, "Preencha o grau de rotação!", "", JOptionPane.PLAIN_MESSAGE);
                }
            }
        } else {
            try {
                if (!vlrRotacObj.getText().equals("")) {
                    if (Integer.parseInt(vlrRotacObj.getText()) >= 0) {
                        if (objList.getSelectedRow() > -1) {
                            double intx = 0.00, inty = 0.00;
                            double calcularotacao = 0.00;
                            int x = objList.getSelectedRow();
                            double intemradiano = toRadians(Double.parseDouble(vlrRotacObj.getText()));
                            for (int j = 0; j < DesenhaObjetos.pontos.size(); j++) {
                                if (DesenhaObjetos.pontos.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                    intx = DesenhaObjetos.pontos.get(j).getX();
                                    inty = DesenhaObjetos.pontos.get(j).getY();
                                    calcularotacao = intx * cos(intemradiano) - inty * sin(intemradiano);
                                    DesenhaObjetos.pontos.get(j).setX((int) calcularotacao);
                                    calcularotacao = intx * sin(intemradiano) + inty * cos(intemradiano);
                                    DesenhaObjetos.pontos.get(j).setY((int) calcularotacao);
                                }
                            }
                            System.out.println("Rotacionou pontos");
                            for (int j = 0; j < DesenhaObjetos.linhas.size(); j++) {
                                if (DesenhaObjetos.linhas.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                    intx = DesenhaObjetos.linhas.get(j).getP1().getX();
                                    inty = DesenhaObjetos.linhas.get(j).getP1().getY();
                                    calcularotacao = intx * cos(intemradiano) - inty * sin(intemradiano);
                                    DesenhaObjetos.linhas.get(j).getP1().setX((int) calcularotacao);
                                    calcularotacao = intx * sin(intemradiano) + inty * cos(intemradiano);
                                    DesenhaObjetos.linhas.get(j).getP1().setY((int) calcularotacao);
                                    intx = DesenhaObjetos.linhas.get(j).getP2().getX();
                                    inty = DesenhaObjetos.linhas.get(j).getP2().getY();
                                    calcularotacao = intx * cos(intemradiano) - inty * sin(intemradiano);
                                    DesenhaObjetos.linhas.get(j).getP2().setX((int) calcularotacao);
                                    calcularotacao = intx * sin(intemradiano) + inty * cos(intemradiano);
                                    DesenhaObjetos.linhas.get(j).getP2().setY((int) calcularotacao);
                                }
                            }
                            System.out.println("Rotacionou Linhas");
                            for (int j = 0; j < DesenhaObjetos.polilinhas.size(); j++) {
                                if (DesenhaObjetos.polilinhas.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                    for (int i = 0; i < DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().size(); i++) {
                                        intx = DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).getX();
                                        inty = DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).getY();
                                        calcularotacao = intx * cos(intemradiano) - inty * sin(intemradiano);
                                        DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).setX((int) calcularotacao);
                                        calcularotacao = intx * sin(intemradiano) + inty * cos(intemradiano);
                                        DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).setY((int) calcularotacao);
                                    }
                                }
                            }
                            System.out.println("Rotacionou Polilinhas");
                            for (int j = 0; j < DesenhaObjetos.poligonos.size(); j++) {
                                if (DesenhaObjetos.poligonos.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                    for (int i = 0; i < DesenhaObjetos.poligonos.get(j).getPontosPoligono().size(); i++) {
                                        intx = DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).getX();
                                        inty = DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).getY();
                                        calcularotacao = intx * cos(intemradiano) - inty * sin(intemradiano);
                                        DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).setX((int) calcularotacao);
                                        calcularotacao = intx * sin(intemradiano) + inty * cos(intemradiano);
                                        DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).setY((int) calcularotacao);
                                    }
                                }
                            }
                            System.out.println("Rotacionou Poligonos");
                            System.out.println("ROTACIONOU SEM MATRIZ");
                            DesenhaObjetos.updateList();
                            DesenhaObjetos.desenhaObjetos((Graphics2D) painelPintura.getGraphics());
                            vlrRotacObj.setText("");
                        } else {
                            JOptionPane.showConfirmDialog(null, "Selecione um objeto!", "", JOptionPane.PLAIN_MESSAGE);
                        }
                    } else {
                        JOptionPane.showConfirmDialog(null, "Apenas valores maiores que 0!", "", JOptionPane.PLAIN_MESSAGE);
                    }
                } else {
                    JOptionPane.showConfirmDialog(null, "Preencha o grau de rotação!", "", JOptionPane.PLAIN_MESSAGE);
                }
            } catch (Exception e) {
                System.out.println(e);
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_bAntiHorarioObjetoActionPerformed

    private void bHorarioObjetoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bHorarioObjetoActionPerformed
        if (operaMatriz.isSelected()) {
            if (rotacionaemPonto.isSelected()) {
                //OPERA MATRIZ COM PONTO
                if (!vlrRotacObj.getText().equals("")) {
                    if (Integer.parseInt(vlrRotacObj.getText()) >= 0) {
                        if (objList.getSelectedRow() > -1) {
                            int x = objList.getSelectedRow();
                            double intemradiano = toRadians(Double.parseDouble(vlrRotacObj.getText()));
                            //NAO ESQUECER MEXER NESSE SIN, É NO OUTRO DE CIMA
                            //NAO MEXI
                            double rotacao[][] = {{cos(intemradiano), -sin(intemradiano), 0}, {sin(intemradiano), cos(intemradiano), 0}, {Integer.valueOf(vlrXPontoRotacObj.getText()), Integer.valueOf(vlrYPontoRotacObj.getText()), 0}};
                            int linhas[][] = new int[3][3];
                            int polilinhas[][];
                            int poligonos[][];
                            try {
                                for (int j = 0; j < DesenhaObjetos.pontos.size(); j++) {
                                    if (DesenhaObjetos.pontos.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                        System.out.println("#");
                                    }
                                    System.out.println("Rotacionou pontos");
                                }
                                for (int j = 0; j < DesenhaObjetos.linhas.size(); j++) {
                                    if (DesenhaObjetos.linhas.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                        double matriz_linha_p1[] = {DesenhaObjetos.linhas.get(j).getP1().getX(), DesenhaObjetos.linhas.get(j).getP1().getY(), 1.00};
                                        double matriz_linha_p2[] = {DesenhaObjetos.linhas.get(j).getP2().getX(), DesenhaObjetos.linhas.get(j).getP2().getY(), 1.00};
                                        linhas[0][0] = (int) ((matriz_linha_p1[0] * rotacao[0][0])
                                                + (matriz_linha_p1[1] * rotacao[1][0])
                                                + (matriz_linha_p1[2] * rotacao[2][0]));
                                        linhas[0][1] = (int) ((matriz_linha_p1[0] * rotacao[0][1])
                                                + (matriz_linha_p1[1] * rotacao[1][1])
                                                + (matriz_linha_p1[2] * rotacao[2][1]));
                                        linhas[0][2] = (int) ((matriz_linha_p1[0] * rotacao[0][2])
                                                + (matriz_linha_p1[1] * rotacao[1][2])
                                                + (matriz_linha_p1[2] * rotacao[2][2]));
                                        linhas[1][0] = (int) ((matriz_linha_p2[0] * rotacao[0][0])
                                                + (matriz_linha_p2[1] * rotacao[1][0])
                                                + (matriz_linha_p2[2] * rotacao[2][0]));
                                        linhas[1][1] = (int) ((matriz_linha_p2[0] * rotacao[0][1])
                                                + (matriz_linha_p2[1] * rotacao[1][1])
                                                + (matriz_linha_p2[2] * rotacao[2][1]));
                                        linhas[1][2] = (int) ((matriz_linha_p2[0] * rotacao[0][2])
                                                + (matriz_linha_p2[1] * rotacao[1][2])
                                                + (matriz_linha_p2[2] * rotacao[2][2]));
                                        DesenhaObjetos.linhas.get(j).getP1().setX(linhas[0][0]);
                                        DesenhaObjetos.linhas.get(j).getP1().setY(linhas[0][1]);
                                        DesenhaObjetos.linhas.get(j).getP2().setX(linhas[1][0]);
                                        DesenhaObjetos.linhas.get(j).getP2().setY(linhas[1][1]);
                                    }
                                    System.out.println("Rotacionou linhas");
                                }

                                for (int j = 0; j < DesenhaObjetos.polilinhas.size(); j++) {
                                    polilinhas = new int[DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().size()][3];

                                    if (DesenhaObjetos.polilinhas.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                        for (int i = 0; i < DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().size(); i++) {

                                            double matriz_polilinha_ponto[] = {DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).getX(), DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).getY(), 1.00};

                                            polilinhas[i][0] = (int) ((matriz_polilinha_ponto[0] * rotacao[0][0])
                                                    + (matriz_polilinha_ponto[1] * rotacao[1][0])
                                                    + (matriz_polilinha_ponto[2] * rotacao[2][0]));
                                            polilinhas[i][1] = (int) ((matriz_polilinha_ponto[0] * rotacao[0][1])
                                                    + (matriz_polilinha_ponto[1] * rotacao[1][1])
                                                    + (matriz_polilinha_ponto[2] * rotacao[2][1]));
                                            polilinhas[i][2] = (int) ((matriz_polilinha_ponto[0] * rotacao[0][2])
                                                    + (matriz_polilinha_ponto[1] * rotacao[1][2])
                                                    + (matriz_polilinha_ponto[2] * rotacao[2][2]));

                                            DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).setX(polilinhas[i][0]);
                                            DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).setY(polilinhas[i][1]);

                                        }
                                    }
                                    System.out.println("Rotacionou polilinhas");
                                }

                                for (int j = 0; j < DesenhaObjetos.poligonos.size(); j++) {
                                    poligonos = new int[DesenhaObjetos.poligonos.get(j).getPontosPoligono().size()][3];
                                    if (DesenhaObjetos.poligonos.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                        for (int i = 0; i < DesenhaObjetos.poligonos.get(j).getPontosPoligono().size(); i++) {
                                            double matriz_poligono_ponto[] = {DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).getX(), DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).getY(), 1.00};
                                            poligonos[i][0] = (int) ((matriz_poligono_ponto[0] * rotacao[0][0])
                                                    + (matriz_poligono_ponto[1] * rotacao[1][0])
                                                    + (matriz_poligono_ponto[2] * rotacao[2][0]));
                                            poligonos[i][1] = (int) ((matriz_poligono_ponto[0] * rotacao[0][1])
                                                    + (matriz_poligono_ponto[1] * rotacao[1][1])
                                                    + (matriz_poligono_ponto[2] * rotacao[2][1]));
                                            poligonos[i][2] = (int) ((matriz_poligono_ponto[0] * rotacao[0][2])
                                                    + (matriz_poligono_ponto[1] * rotacao[1][2])
                                                    + (matriz_poligono_ponto[2] * rotacao[2][2]));
                                            DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).setX(poligonos[i][0]);
                                            DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).setY(poligonos[i][1]);
                                        }
                                    }
                                    System.out.println("Rotacionou poligonos");
                                }
                            } catch (Exception e) {
                                System.out.println(e);
                            }
                            rotacao = null;
                            vlrXPontoRotacObj.setText("0");
                            vlrYPontoRotacObj.setText("0");
                            System.out.println("ROTACIONOU POR MATRIZ COM PONTO");
                            DesenhaObjetos.updateList();
                            DesenhaObjetos.desenhaObjetos((Graphics2D) painelPintura.getGraphics());
                        } else {
                            JOptionPane.showConfirmDialog(null, "Selecione um objeto!", "", JOptionPane.PLAIN_MESSAGE);
                        }
                    } else {
                        JOptionPane.showConfirmDialog(null, "Apenas valores maiores que 0!", "", JOptionPane.PLAIN_MESSAGE);
                    }
                } else {
                    JOptionPane.showConfirmDialog(null, "Preencha o grau de rotação!", "", JOptionPane.PLAIN_MESSAGE);
                }
            } //ROTACIONA CENTRO
            //TENTATIVA DE FAZER COM FOR, NA MAO ESTAVA DANDO MUITO PROBLEMA
            if (rotacionanoCentro.isSelected()) {
                try {
                    if (!vlrRotacObj.getText().equals("")) {
                        if (Integer.parseInt(vlrRotacObj.getText()) >= 0) {
                            if (objList.getSelectedRow() > -1) {
                                int vlr_x = 0, vlr_y = 0, linha, coluna, t, produto = 0;
                                double intemradiano = toRadians(Double.parseDouble(vlrRotacObj.getText()));
                                double rotacao[][] = {{cos(intemradiano), -sin(intemradiano), 0}, {sin(intemradiano), cos(intemradiano), 0}, {0, 0, 1}};
                                int matriz_a[][], matriz_b[][], matriz1[][] = new int[1][3], matriz2[][] = new int[3][3], matriz3[][] = new int[1][3];
                                int a_auxiliar[][] = {{1, 0, 0}, {0, 1, 0}, {-(vlr_x), -(vlr_y), 1}};
                                int b_auxiliar[][] = {{1, 0, 0}, {0, 1, 0}, {vlr_x, vlr_y, 1}};
                                matriz_a = a_auxiliar;
                                matriz_b = b_auxiliar;
                                //ALTERAR PARA ALTERNAR ENTRE HORARIO E ANTI
                                //ALTERADO LA
                                for (linha = 0; linha < 3; linha++) {
                                    for (coluna = 0; coluna < 3; coluna++) {
                                        produto = 0;
                                        for (t = 0; t < 3; t++) {
                                            produto += matriz_a[linha][t] * rotacao[t][coluna];
                                        }
                                        matriz2[linha][coluna] = produto;
                                    }
                                }
                                for (linha = 0; linha < 3; linha++) {
                                    for (coluna = 0; coluna < 3; coluna++) {
                                        produto = 0;
                                        for (t = 0; t < 3; t++) {
                                            produto += matriz2[linha][t] * matriz_b[t][coluna];
                                        }
                                        matriz2[linha][coluna] = produto;
                                    }
                                }
                                for (Ponto ponto : DesenhaObjetos.pontos) {
                                    if (ponto.getNome().equals(objList.getValueAt(objList.getSelectedRow(), 1))) {
                                        matriz1[0][0] = ponto.getX();
                                        matriz1[0][1] = ponto.getY();
                                        matriz1[0][2] = 1;
                                        for (coluna = 0; coluna < 3; coluna++) {
                                            produto = 0;
                                            for (t = 0; t < 3; t++) {
                                                produto += matriz1[0][t] * matriz2[t][coluna];
                                            }
                                            matriz3[0][coluna] = produto;
                                        }
                                        ponto.setX(matriz3[0][0]);
                                        ponto.setY(matriz3[0][1]);
                                    }
                                }
                                for (Linha linha1 : DesenhaObjetos.linhas) {
                                    if (linha1.getNome().equals(objList.getValueAt(objList.getSelectedRow(), 1))) {
                                        matriz1[0][0] = linha1.getP1().getX();
                                        matriz1[0][1] = linha1.getP1().getY();
                                        matriz1[0][2] = 1;
                                        for (coluna = 0; coluna < 3; coluna++) {
                                            produto = 0;
                                            for (t = 0; t < 3; t++) {
                                                produto += matriz1[0][t] * matriz2[t][coluna];
                                            }
                                            matriz3[0][coluna] = produto;
                                        }
                                        linha1.getP1().setX(matriz3[0][0]);
                                        linha1.getP1().setY(matriz3[0][1]);
                                        matriz1[0][0] = linha1.getP2().getX();
                                        matriz1[0][1] = linha1.getP2().getY();
                                        matriz1[0][2] = 1;
                                        for (coluna = 0; coluna < 3; coluna++) {
                                            produto = 0;
                                            for (t = 0; t < 3; t++) {
                                                produto += matriz1[0][t] * matriz2[t][coluna];
                                            }
                                            matriz3[0][coluna] = produto;
                                        }
                                        linha1.getP2().setX(matriz3[0][0]);
                                        linha1.getP2().setY(matriz3[0][1]);
                                    }
                                }
                                for (Polilinha polilinha1 : DesenhaObjetos.polilinhas) {
                                    if (polilinha1.getNome().equals(objList.getValueAt(objList.getSelectedRow(), 1))) {
                                        for (int r = 0; r < polilinha1.getPontosPolilinha().size(); r++) {
                                            matriz1[0][0] = polilinha1.getPontosPolilinha().get(r).getX();
                                            matriz1[0][1] = polilinha1.getPontosPolilinha().get(r).getY();
                                            matriz1[0][2] = 1;
                                            for (coluna = 0; coluna < 3; coluna++) {
                                                produto = 0;
                                                for (t = 0; t < 3; t++) {
                                                    produto += matriz1[0][t] * matriz2[t][coluna];
                                                }
                                                matriz3[0][coluna] = produto;
                                            }
                                            polilinha1.getPontosPolilinha().get(r).setX(matriz3[0][0]);
                                            polilinha1.getPontosPolilinha().get(r).setY(matriz3[0][1]);
                                        }
                                    }
                                }
                                for (Poligono poligono1 : DesenhaObjetos.poligonos) {
                                    if (poligono1.getNome().equals(objList.getValueAt(objList.getSelectedRow(), 1))) {
                                        for (int r = 0; r < poligono1.getPontosPoligono().size(); r++) {
                                            matriz1[0][0] = poligono1.getPontosPoligono().get(r).getX();
                                            matriz1[0][1] = poligono1.getPontosPoligono().get(r).getY();
                                            matriz1[0][2] = 1;
                                            for (coluna = 0; coluna < 3; coluna++) {
                                                produto = 0;
                                                for (t = 0; t < 3; t++) {
                                                    produto += matriz1[0][t] * matriz2[t][coluna];
                                                }
                                                matriz3[0][coluna] = produto;
                                            }
                                            poligono1.getPontosPoligono().get(r).setX(matriz3[0][0]);
                                            poligono1.getPontosPoligono().get(r).setY(matriz3[0][1]);
                                        }
                                    }
                                }
                                DesenhaObjetos.updateList();
                                DesenhaObjetos.desenhaObjetos((Graphics2D) painelPintura.getGraphics());
                                System.out.println("ROTACIONOU CENTRO");
                            } else {
                                JOptionPane.showConfirmDialog(null, "Selecione um objeto!", "", JOptionPane.PLAIN_MESSAGE);
                            }
                        } else {
                            JOptionPane.showConfirmDialog(null, "Apenas valores maiores que 0!", "", JOptionPane.PLAIN_MESSAGE);
                        }
                    } else {
                        JOptionPane.showConfirmDialog(null, "Preencha o grau de rotação!", "", JOptionPane.PLAIN_MESSAGE);
                    }
                } catch (Exception e) {
                    System.out.println(e);
                }
            } else {
                //OPERA MATRIZ SEM PONTO
                if (!vlrRotacObj.getText().equals("")) {
                    if (Integer.parseInt(vlrRotacObj.getText()) >= 0) {
                        if (objList.getSelectedRow() > -1) {
                            int x = objList.getSelectedRow();
                            double intemradiano = toRadians(Double.parseDouble(vlrRotacObj.getText()));
                            //NAO ESQUECER MEXER NESSE SIN, É NO OUTRO DE CIMA
                            //NAO MEXI
                            double rotacao[][] = {{cos(intemradiano), -sin(intemradiano), 0}, {sin(intemradiano), cos(intemradiano), 0}, {0, 0, 1}};
                            int linhas[][] = new int[3][3];
                            int polilinhas[][];
                            int poligonos[][];
                            try {
                                for (int j = 0; j < DesenhaObjetos.pontos.size(); j++) {
                                    if (DesenhaObjetos.pontos.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                        System.out.println("#");
                                    }
                                    System.out.println("Rotacionou pontos");
                                }
                                for (int j = 0; j < DesenhaObjetos.linhas.size(); j++) {
                                    if (DesenhaObjetos.linhas.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                        double matriz_linha_p1[] = {DesenhaObjetos.linhas.get(j).getP1().getX(), DesenhaObjetos.linhas.get(j).getP1().getY(), 1.00};
                                        double matriz_linha_p2[] = {DesenhaObjetos.linhas.get(j).getP2().getX(), DesenhaObjetos.linhas.get(j).getP2().getY(), 1.00};
                                        linhas[0][0] = (int) ((matriz_linha_p1[0] * rotacao[0][0])
                                                + (matriz_linha_p1[1] * rotacao[1][0])
                                                + (matriz_linha_p1[2] * rotacao[2][0]));
                                        linhas[0][1] = (int) ((matriz_linha_p1[0] * rotacao[0][1])
                                                + (matriz_linha_p1[1] * rotacao[1][1])
                                                + (matriz_linha_p1[2] * rotacao[2][1]));
                                        linhas[0][2] = (int) ((matriz_linha_p1[0] * rotacao[0][2])
                                                + (matriz_linha_p1[1] * rotacao[1][2])
                                                + (matriz_linha_p1[2] * rotacao[2][2]));
                                        linhas[1][0] = (int) ((matriz_linha_p2[0] * rotacao[0][0])
                                                + (matriz_linha_p2[1] * rotacao[1][0])
                                                + (matriz_linha_p2[2] * rotacao[2][0]));
                                        linhas[1][1] = (int) ((matriz_linha_p2[0] * rotacao[0][1])
                                                + (matriz_linha_p2[1] * rotacao[1][1])
                                                + (matriz_linha_p2[2] * rotacao[2][1]));
                                        linhas[1][2] = (int) ((matriz_linha_p2[0] * rotacao[0][2])
                                                + (matriz_linha_p2[1] * rotacao[1][2])
                                                + (matriz_linha_p2[2] * rotacao[2][2]));
                                        DesenhaObjetos.linhas.get(j).getP1().setX(linhas[0][0]);
                                        DesenhaObjetos.linhas.get(j).getP1().setY(linhas[0][1]);
                                        DesenhaObjetos.linhas.get(j).getP2().setX(linhas[1][0]);
                                        DesenhaObjetos.linhas.get(j).getP2().setY(linhas[1][1]);
                                    }
                                    System.out.println("Rotacionou linhas");
                                }

                                for (int j = 0; j < DesenhaObjetos.polilinhas.size(); j++) {
                                    polilinhas = new int[DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().size()][3];

                                    if (DesenhaObjetos.polilinhas.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                        for (int i = 0; i < DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().size(); i++) {

                                            double matriz_polilinha_ponto[] = {DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).getX(), DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).getY(), 1.00};

                                            polilinhas[i][0] = (int) ((matriz_polilinha_ponto[0] * rotacao[0][0])
                                                    + (matriz_polilinha_ponto[1] * rotacao[1][0])
                                                    + (matriz_polilinha_ponto[2] * rotacao[2][0]));
                                            polilinhas[i][1] = (int) ((matriz_polilinha_ponto[0] * rotacao[0][1])
                                                    + (matriz_polilinha_ponto[1] * rotacao[1][1])
                                                    + (matriz_polilinha_ponto[2] * rotacao[2][1]));
                                            polilinhas[i][2] = (int) ((matriz_polilinha_ponto[0] * rotacao[0][2])
                                                    + (matriz_polilinha_ponto[1] * rotacao[1][2])
                                                    + (matriz_polilinha_ponto[2] * rotacao[2][2]));

                                            DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).setX(polilinhas[i][0]);
                                            DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).setY(polilinhas[i][1]);

                                        }
                                    }
                                    System.out.println("Rotacionou polilinhas");
                                }

                                for (int j = 0; j < DesenhaObjetos.poligonos.size(); j++) {
                                    poligonos = new int[DesenhaObjetos.poligonos.get(j).getPontosPoligono().size()][3];
                                    if (DesenhaObjetos.poligonos.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                        for (int i = 0; i < DesenhaObjetos.poligonos.get(j).getPontosPoligono().size(); i++) {
                                            double matriz_poligono_ponto[] = {DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).getX(), DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).getY(), 1.00};
                                            poligonos[i][0] = (int) ((matriz_poligono_ponto[0] * rotacao[0][0])
                                                    + (matriz_poligono_ponto[1] * rotacao[1][0])
                                                    + (matriz_poligono_ponto[2] * rotacao[2][0]));
                                            poligonos[i][1] = (int) ((matriz_poligono_ponto[0] * rotacao[0][1])
                                                    + (matriz_poligono_ponto[1] * rotacao[1][1])
                                                    + (matriz_poligono_ponto[2] * rotacao[2][1]));
                                            poligonos[i][2] = (int) ((matriz_poligono_ponto[0] * rotacao[0][2])
                                                    + (matriz_poligono_ponto[1] * rotacao[1][2])
                                                    + (matriz_poligono_ponto[2] * rotacao[2][2]));
                                            DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).setX(poligonos[i][0]);
                                            DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).setY(poligonos[i][1]);
                                        }
                                    }
                                    System.out.println("Rotacionou poligonos");
                                }
                            } catch (Exception e) {
                                System.out.println(e);
                            }
                            System.out.println("ROTACIONOU POR MATRIZ NORMAL");
                            DesenhaObjetos.updateList();
                            DesenhaObjetos.desenhaObjetos((Graphics2D) painelPintura.getGraphics());
                        } else {
                            JOptionPane.showConfirmDialog(null, "Selecione um objeto!", "", JOptionPane.PLAIN_MESSAGE);
                        }
                    } else {
                        JOptionPane.showConfirmDialog(null, "Apenas valores maiores que 0!", "", JOptionPane.PLAIN_MESSAGE);
                    }
                } else {
                    JOptionPane.showConfirmDialog(null, "Preencha o grau de rotação!", "", JOptionPane.PLAIN_MESSAGE);
                }
            }
        } else {
            try {
                if (!vlrRotacObj.getText().equals("")) {
                    if (Integer.parseInt(vlrRotacObj.getText()) >= 0) {
                        if (objList.getSelectedRow() > -1) {
                            double intx = 0.00, inty = 0.00;
                            double calcularotacao = 0.00;
                            double intemradiano = 0.0;
                            int x = objList.getSelectedRow();
                            intemradiano = toRadians(-1 * Double.parseDouble(vlrRotacObj.getText()));
                            for (int j = 0; j < DesenhaObjetos.pontos.size(); j++) {
                                if (DesenhaObjetos.pontos.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                    intx = DesenhaObjetos.pontos.get(j).getX();
                                    inty = DesenhaObjetos.pontos.get(j).getY();
                                    calcularotacao = intx * cos(intemradiano) - inty * sin(intemradiano);
                                    DesenhaObjetos.pontos.get(j).setX((int) calcularotacao);
                                    calcularotacao = intx * sin(intemradiano) + inty * cos(intemradiano);
                                    DesenhaObjetos.pontos.get(j).setY((int) calcularotacao);
                                }
                            }
                            System.out.println("Rotacionou pontos");
                            for (int j = 0; j < DesenhaObjetos.linhas.size(); j++) {
                                if (DesenhaObjetos.linhas.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                    intx = DesenhaObjetos.linhas.get(j).getP1().getX();
                                    inty = DesenhaObjetos.linhas.get(j).getP1().getY();
                                    calcularotacao = intx * cos(intemradiano) - inty * sin(intemradiano);
                                    DesenhaObjetos.linhas.get(j).getP1().setX((int) calcularotacao);
                                    calcularotacao = intx * sin(intemradiano) + inty * cos(intemradiano);
                                    DesenhaObjetos.linhas.get(j).getP1().setY((int) calcularotacao);
                                    intx = DesenhaObjetos.linhas.get(j).getP2().getX();
                                    inty = DesenhaObjetos.linhas.get(j).getP2().getY();
                                    calcularotacao = intx * cos(intemradiano) - inty * sin(intemradiano);
                                    DesenhaObjetos.linhas.get(j).getP2().setX((int) calcularotacao);
                                    calcularotacao = intx * sin(intemradiano) + inty * cos(intemradiano);
                                    DesenhaObjetos.linhas.get(j).getP2().setY((int) calcularotacao);
                                }
                            }
                            System.out.println("Rotacionou Linhas");
                            for (int j = 0; j < DesenhaObjetos.polilinhas.size(); j++) {
                                if (DesenhaObjetos.polilinhas.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                    for (int i = 0; i < DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().size(); i++) {
                                        intx = DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).getX();
                                        inty = DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).getY();
                                        calcularotacao = intx * cos(intemradiano) - inty * sin(intemradiano);
                                        DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).setX((int) calcularotacao);
                                        calcularotacao = intx * sin(intemradiano) + inty * cos(intemradiano);
                                        DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(i).setY((int) calcularotacao);
                                    }
                                }
                            }
                            System.out.println("Rotacionou Polilinhas");
                            for (int j = 0; j < DesenhaObjetos.poligonos.size(); j++) {
                                if (DesenhaObjetos.poligonos.get(j).getNome().equals(objList.getValueAt(x, 1))) {
                                    for (int i = 0; i < DesenhaObjetos.poligonos.get(j).getPontosPoligono().size(); i++) {
                                        intx = DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).getX();
                                        inty = DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).getY();
                                        calcularotacao = intx * cos(intemradiano) - inty * sin(intemradiano);
                                        DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).setX((int) calcularotacao);
                                        calcularotacao = intx * sin(intemradiano) + inty * cos(intemradiano);
                                        DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(i).setY((int) calcularotacao);
                                    }
                                }
                            }
                            System.out.println("Rotacionou Poligonos");
                            System.out.println("ROTACIONOU SEM MATRIZ");
                            DesenhaObjetos.updateList();
                            DesenhaObjetos.desenhaObjetos((Graphics2D) painelPintura.getGraphics());
                            vlrRotacObj.setText("");
                        } else {
                            JOptionPane.showConfirmDialog(null, "Selecione um objeto!", "", JOptionPane.PLAIN_MESSAGE);
                        }
                    } else {
                        JOptionPane.showConfirmDialog(null, "Apenas valores maiores que 0!", "", JOptionPane.PLAIN_MESSAGE);
                    }
                } else {
                    JOptionPane.showConfirmDialog(null, "Preencha o grau de rotação!", "", JOptionPane.PLAIN_MESSAGE);
                }
            } catch (Exception e) {
                System.out.println(e);
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_bHorarioObjetoActionPerformed

    private void vlrXPontoRotacObjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vlrXPontoRotacObjActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vlrXPontoRotacObjActionPerformed

    private void vlrYPontoRotacObjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vlrYPontoRotacObjActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vlrYPontoRotacObjActionPerformed

    private void operaMatrizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operaMatrizActionPerformed
        if (operaMatriz.isSelected()) {
            rotacionaemPonto.setEnabled(true);
            redimensionarsobreOrigem.setEnabled(true);
            rotacionanoCentro.setEnabled(true);
            redimensionarsobreCentro.setEnabled(true);
        } else {
            rotacionaemPonto.setEnabled(false);
            rotacionaemPonto.setSelected(false);
            rotacionanoCentro.setEnabled(false);
            redimensionarsobreCentro.setEnabled(false);
            vlrXPontoRotacObj.setEnabled(false);
            vlrYPontoRotacObj.setEnabled(false);
            vlrXPontoRotacObj.setText(null);
            vlrYPontoRotacObj.setText(null);
            redimensionarsobreOrigem.setEnabled(false);
            redimensionarsobreOrigem.setSelected(false);
        }
    }//GEN-LAST:event_operaMatrizActionPerformed

    private void rotacionaemPontoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacionaemPontoActionPerformed
        if (rotacionaemPonto.isSelected()) {
            vlrXPontoRotacObj.setEnabled(true);
            vlrYPontoRotacObj.setEnabled(true);
            rotacionanoCentro.setEnabled(false);
        } else {
            vlrXPontoRotacObj.setText(null);
            vlrYPontoRotacObj.setText(null);
            rotacionanoCentro.setEnabled(true);
        }
// TODO add your handling code here:
    }//GEN-LAST:event_rotacionaemPontoActionPerformed

    private void rotacionanoCentroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacionanoCentroActionPerformed
        if (rotacionanoCentro.isSelected()) {
            vlrXPontoRotacObj.setEnabled(false);
            vlrYPontoRotacObj.setEnabled(false);
            vlrXPontoRotacObj.setText(null);
            vlrYPontoRotacObj.setText(null);
            rotacionaemPonto.setEnabled(false);
        } else {
            rotacionaemPonto.setEnabled(true);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_rotacionanoCentroActionPerformed

    private void redimensionarsobreOrigemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redimensionarsobreOrigemActionPerformed
        if (redimensionarsobreOrigem.isSelected()) {
            redimensionarsobreCentro.setEnabled(false);
            vlrZoomObjX.setEnabled(true);
            vlrZoomObjY.setEnabled(true);
        } else {
            redimensionarsobreCentro.setEnabled(true);
            vlrZoomObjX.setEnabled(true);
            vlrZoomObjY.setEnabled(true);
        }
// TODO add your handling code here:
    }//GEN-LAST:event_redimensionarsobreOrigemActionPerformed

    private void redimensionarsobreCentroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redimensionarsobreCentroActionPerformed
        if (redimensionarsobreCentro.isSelected()) {
            redimensionarsobreOrigem.setEnabled(false);
            vlrZoomObjX.setEnabled(true);
            vlrZoomObjY.setEnabled(true);
        } else {
            redimensionarsobreOrigem.setEnabled(true);
            vlrZoomObjX.setEnabled(true);
            vlrZoomObjY.setEnabled(true);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_redimensionarsobreCentroActionPerformed

    private void vlrAngCisalhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vlrAngCisalhaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vlrAngCisalhaActionPerformed

    private void CisalharObjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CisalharObjActionPerformed
        if (objList.getSelectedRow() > -1) {
            if (!vlrAngCisalha.getText().equals("")) {
                try {
                    double intemradiano = toRadians(Double.parseDouble(vlrAngCisalha.getText()));
                    double matriz_cisalhamento[][] = {{1, Math.tan(intemradiano)}, {0, 1}};
                    int matriz_f[][] = new int[1][2], matriz_d[][] = new int[1][3], coluna, t, somaprod = 0;
                    if (cisalhaY.isSelected()) {
                        double matriz_aux[][] = {{1, Math.tan(intemradiano)}, {0, 1}};
                        matriz_cisalhamento = matriz_aux;
                    }
                    if (cisalhaX.isSelected()) {
                        double matriz_aux[][] = {{1, 0}, {Math.tan(intemradiano), 1}};
                        matriz_cisalhamento = matriz_aux;
                    }
                    for (int j = 0; j < DesenhaObjetos.pontos.size(); j++) {
                        if (DesenhaObjetos.pontos.get(j).getNome().equals(objList.getValueAt(objList.getSelectedRow(), 1))) {
                            matriz_f[0][0] = DesenhaObjetos.pontos.get(j).getX();
                            matriz_f[0][1] = DesenhaObjetos.pontos.get(j).getY();
                            for (coluna = 0; coluna < 2; coluna++) {
                                somaprod = 0;
                                for (t = 0; t < 2; t++) {
                                    somaprod += matriz_f[0][t] * matriz_cisalhamento[t][coluna];
                                }
                                matriz_d[0][coluna] = somaprod;
                            }
                            DesenhaObjetos.pontos.get(j).setX(matriz_d[0][0]);
                            DesenhaObjetos.pontos.get(j).setY(matriz_d[0][1]);
                        }
                    }
                    for (int j = 0; j < DesenhaObjetos.linhas.size(); j++) {
                        if (DesenhaObjetos.linhas.get(j).getNome().equals(objList.getValueAt(objList.getSelectedRow(), 1))) {
                            matriz_f[0][0] = DesenhaObjetos.linhas.get(j).getP1().getX();
                            matriz_f[0][1] = DesenhaObjetos.linhas.get(j).getP1().getY();
                            for (coluna = 0; coluna < 2; coluna++) {
                                somaprod = 0;
                                for (t = 0; t < 2; t++) {
                                    somaprod += matriz_f[0][t] * matriz_cisalhamento[t][coluna];
                                }
                                matriz_d[0][coluna] = somaprod;
                            }
                            DesenhaObjetos.linhas.get(j).getP1().setX(matriz_d[0][0]);
                            DesenhaObjetos.linhas.get(j).getP1().setY(matriz_d[0][1]);
                            matriz_f[0][0] = DesenhaObjetos.linhas.get(j).getP2().getX();
                            matriz_f[0][1] = DesenhaObjetos.linhas.get(j).getP2().getY();
                            for (coluna = 0; coluna < 2; coluna++) {
                                somaprod = 0;
                                for (t = 0; t < 2; t++) {
                                    somaprod += matriz_f[0][t] * matriz_cisalhamento[t][coluna];
                                }
                                matriz_d[0][coluna] = somaprod;
                            }
                            DesenhaObjetos.linhas.get(j).getP2().setX(matriz_d[0][0]);
                            DesenhaObjetos.linhas.get(j).getP2().setY(matriz_d[0][1]);
                        }
                    }
                    for (int j = 0; j < DesenhaObjetos.polilinhas.size(); j++) {
                        if (DesenhaObjetos.polilinhas.get(j).getNome().equals(objList.getValueAt(objList.getSelectedRow(), 1))) {
                            for (int r = 0; r < DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().size(); r++) {
                                matriz_f[0][0] = DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(r).getX();
                                matriz_f[0][1] = DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(r).getY();
                                for (coluna = 0; coluna < 2; coluna++) {
                                    somaprod = 0;
                                    for (t = 0; t < 2; t++) {
                                        somaprod += matriz_f[0][t] * matriz_cisalhamento[t][coluna];
                                    }
                                    matriz_d[0][coluna] = somaprod;
                                }
                                DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(r).setX(matriz_d[0][0]);
                                DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(r).setY(matriz_d[0][1]);
                            }
                        }
                    }
                    for (int j = 0; j < DesenhaObjetos.poligonos.size(); j++) {
                        if (DesenhaObjetos.poligonos.get(j).getNome().equals(objList.getValueAt(objList.getSelectedRow(), 1))) {
                            for (int r = 0; r < DesenhaObjetos.poligonos.get(j).getPontosPoligono().size(); r++) {
                                matriz_f[0][0] = DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(r).getX();
                                matriz_f[0][1] = DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(r).getY();
                                for (coluna = 0; coluna < 2; coluna++) {
                                    somaprod = 0;
                                    for (t = 0; t < 2; t++) {
                                        somaprod += matriz_f[0][t] * matriz_cisalhamento[t][coluna];
                                    }
                                    matriz_d[0][coluna] = somaprod;
                                }
                                DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(r).setX(matriz_d[0][0]);
                                DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(r).setY(matriz_d[0][1]);
                            }
                        }
                    }
                } catch (Exception e) {
                    System.out.println(e);
                }
                DesenhaObjetos.updateList();
                DesenhaObjetos.desenhaObjetos((Graphics2D) painelPintura.getGraphics());
            } else {
                JOptionPane.showConfirmDialog(null, "Preencha o grau de rotação!", "", JOptionPane.PLAIN_MESSAGE);
            }
        } else {
            JOptionPane.showConfirmDialog(null, "Selecione um Objeto!", "", JOptionPane.PLAIN_MESSAGE);
        }
        //if (objList.getSelectedRow() > -1) {
// TODO add your handling code here:
    }//GEN-LAST:event_CisalharObjActionPerformed

    private void RefletirObjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefletirObjActionPerformed
        if (objList.getSelectedRow() > -1) {
            try {
                int matriz_f[][] = new int[1][3];
                int matriz_d[][] = new int[1][3];
                int coluna, t, somaprod = 0;
                int matriz_identidade[][] = {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
                if (refletX.isSelected()) {
                    int matriz_aux[][] = {{1, 0, 0}, {0, -1, 0}, {0, 0, 1}};
                    matriz_identidade = matriz_aux;
                }
                if (refletY.isSelected()) {
                    int matriz_aux[][] = {{-1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
                    matriz_identidade = matriz_aux;
                }
                /*if (refletOrigem.isSelected()) {
                    
                    matriz_identidade = matriz_aux;
                }NÃO ROLOU TERIA QUE CONSERTAR*/
                for (int j = 0; j < DesenhaObjetos.pontos.size(); j++) {
                    if (DesenhaObjetos.pontos.get(j).getNome().equals(objList.getValueAt(objList.getSelectedRow(), 1))) {
                        matriz_f[0][0] = DesenhaObjetos.pontos.get(j).getX();
                        matriz_f[0][1] = DesenhaObjetos.pontos.get(j).getY();
                        matriz_f[0][2] = 1;
                        for (coluna = 0; coluna < 3; coluna++) {
                            somaprod = 0;
                            for (t = 0; t < 3; t++) {
                                somaprod += matriz_f[0][t] * matriz_identidade[t][coluna];
                            }
                            matriz_d[0][coluna] = somaprod;
                        }
                        DesenhaObjetos.pontos.get(j).setX(matriz_d[0][0]);
                        DesenhaObjetos.pontos.get(j).setY(matriz_d[0][1]);
                    }
                    System.out.println("Refletiu Pontos");
                }
                for (int j = 0; j < DesenhaObjetos.linhas.size(); j++) {
                    if (DesenhaObjetos.linhas.get(j).getNome().equals(objList.getValueAt(objList.getSelectedRow(), 1))) {
                        matriz_f[0][0] = DesenhaObjetos.linhas.get(j).getP1().getX();
                        matriz_f[0][1] = DesenhaObjetos.linhas.get(j).getP1().getY();
                        matriz_f[0][2] = 1;
                        for (coluna = 0; coluna < 3; coluna++) {
                            somaprod = 0;
                            for (t = 0; t < 3; t++) {
                                somaprod += matriz_f[0][t] * matriz_identidade[t][coluna];
                            }
                            matriz_d[0][coluna] = somaprod;
                        }
                        DesenhaObjetos.linhas.get(j).getP1().setX(matriz_d[0][0]);
                        DesenhaObjetos.linhas.get(j).getP1().setY(matriz_d[0][1]);
                        matriz_f[0][0] = DesenhaObjetos.linhas.get(j).getP2().getX();
                        matriz_f[0][1] = DesenhaObjetos.linhas.get(j).getP2().getY();
                        matriz_f[0][2] = 1;
                        for (coluna = 0; coluna < 3; coluna++) {
                            somaprod = 0;
                            for (t = 0; t < 3; t++) {
                                somaprod += matriz_f[0][t] * matriz_identidade[t][coluna];
                            }
                            matriz_d[0][coluna] = somaprod;
                        }
                        DesenhaObjetos.linhas.get(j).getP2().setX(matriz_d[0][0]);
                        DesenhaObjetos.linhas.get(j).getP2().setY(matriz_d[0][1]);
                    }
                    System.out.println("Refletiu Linhas");
                }
                for (int j = 0; j < DesenhaObjetos.polilinhas.size(); j++) {
                    if (DesenhaObjetos.polilinhas.get(j).getNome().equals(objList.getValueAt(objList.getSelectedRow(), 1))) {
                        for (int r = 0; r < DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().size(); r++) {
                            matriz_f[0][0] = DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(r).getX();
                            matriz_f[0][1] = DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(r).getY();
                            matriz_f[0][2] = 1;
                            for (coluna = 0; coluna < 3; coluna++) {
                                somaprod = 0;
                                for (t = 0; t < 3; t++) {
                                    somaprod += matriz_f[0][t] * matriz_identidade[t][coluna];
                                }
                                matriz_d[0][coluna] = somaprod;
                            }
                            DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(r).setX(matriz_d[0][0]);
                            DesenhaObjetos.polilinhas.get(j).getPontosPolilinha().get(r).setY(matriz_d[0][1]);
                        }
                    }
                    System.out.println("Refletiu Polilinhas");
                }
                for (int j = 0; j < DesenhaObjetos.poligonos.size(); j++) {
                    if (DesenhaObjetos.poligonos.get(j).getNome().equals(objList.getValueAt(objList.getSelectedRow(), 1))) {
                        for (int r = 0; r < DesenhaObjetos.poligonos.get(j).getPontosPoligono().size(); r++) {
                            matriz_f[0][0] = DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(r).getX();
                            matriz_f[0][1] = DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(r).getY();
                            matriz_f[0][2] = 1;
                            for (coluna = 0; coluna < 3; coluna++) {
                                somaprod = 0;
                                for (t = 0; t < 3; t++) {
                                    somaprod += matriz_f[0][t] * matriz_identidade[t][coluna];
                                }
                                matriz_d[0][coluna] = somaprod;
                            }
                            DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(r).setX(matriz_d[0][0]);
                            DesenhaObjetos.poligonos.get(j).getPontosPoligono().get(r).setY(matriz_d[0][1]);
                        }
                    }
                    System.out.println("Refletiu Poligonos");
                }
            } catch (Exception e) {
                System.out.println(e);
            }
            DesenhaObjetos.updateList();
            DesenhaObjetos.desenhaObjetos((Graphics2D) painelPintura.getGraphics());
        } else {
            JOptionPane.showConfirmDialog(null, "Selecione um Objeto!", "", JOptionPane.PLAIN_MESSAGE);
        }
// TODO add your handling code here:
    }//GEN-LAST:event_RefletirObjActionPerformed

    private void refletXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refletXActionPerformed
        if (refletX.isSelected()) {
            RefletirObj.setEnabled(true);
            refletY.setSelected(false);
            refletOrigem.setSelected(false);
        } else {
            RefletirObj.setEnabled(false);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_refletXActionPerformed

    private void refletYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refletYActionPerformed
        if (refletY.isSelected()) {
            RefletirObj.setEnabled(true);
            refletX.setSelected(false);
            refletOrigem.setSelected(false);
        } else {
            RefletirObj.setEnabled(false);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_refletYActionPerformed

    private void refletOrigemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refletOrigemActionPerformed
        if (refletOrigem.isSelected()) {
            RefletirObj.setEnabled(true);
            refletX.setSelected(false);
            refletY.setSelected(false);
        } else {
            RefletirObj.setEnabled(false);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_refletOrigemActionPerformed

    private void cisalhaXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cisalhaXActionPerformed
        if (cisalhaX.isSelected()) {
            cisalhaY.setSelected(false);
            vlrAngCisalha.setEnabled(true);
        }else{
            vlrAngCisalha.setEnabled(false);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_cisalhaXActionPerformed

    private void cisalhaYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cisalhaYActionPerformed
        if (cisalhaY.isSelected()) {
            cisalhaX.setSelected(false);
            vlrAngCisalha.setEnabled(true);
        }else{
            vlrAngCisalha.setEnabled(false);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_cisalhaYActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NMain.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NMain.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NMain.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NMain.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CisalharObj;
    private javax.swing.JButton MoverObj;
    private javax.swing.JTabbedPane Opcoes;
    private javax.swing.JButton RedimensionarObj;
    private javax.swing.JButton RefletirObj;
    private javax.swing.JButton bAbaixoViewport;
    private javax.swing.JButton bAcimaViewport;
    private javax.swing.JButton bAmpliaViewport;
    private javax.swing.JButton bAntiHorarioObjeto;
    private javax.swing.JButton bDireitaViewport;
    private javax.swing.JButton bEscalar;
    private javax.swing.JButton bEsquerdaViewport;
    private javax.swing.JButton bHorarioObjeto;
    private javax.swing.JButton bLimpaMatriz;
    private javax.swing.JButton bLimpaViewport;
    private javax.swing.JButton bMultiplica;
    private javax.swing.JButton bReduzViewport;
    private javax.swing.JButton bRemoveObjeto;
    private javax.swing.JButton bRotAntiViewport;
    private javax.swing.JButton bRotHorViewport;
    private javax.swing.JButton bSoma1;
    private javax.swing.JCheckBox cisalhaX;
    private javax.swing.JCheckBox cisalhaY;
    private javax.swing.JPanel cisalha_innerpanel;
    private javax.swing.JTextField colEscalar;
    private javax.swing.JTextField colMultA;
    private javax.swing.JTextField colMultB;
    private javax.swing.JTextField colSoma;
    private javax.swing.JPanel drawsubpanel;
    private javax.swing.JPanel drw_innerpanel1;
    private javax.swing.JPanel drw_innerpanel2;
    private javax.swing.JMenuItem itemAbrirLista;
    private javax.swing.JMenuItem itemEscondeGuia;
    private javax.swing.JMenuItem itemFecharApp;
    private javax.swing.JMenuItem itemLinha;
    private javax.swing.JMenuItem itemMostraGuia;
    private javax.swing.JMenuItem itemPoligono;
    private javax.swing.JMenuItem itemPolilinha;
    private javax.swing.JMenuItem itemPonto;
    private javax.swing.JMenuItem itemSalvarLista;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField linEscalar;
    private javax.swing.JTextField linMultA;
    private javax.swing.JTextField linMultB;
    private javax.swing.JTextField linSoma;
    private javax.swing.JScrollPane matrixScroll;
    private javax.swing.JPanel matrix_innerpanel1;
    private javax.swing.JPanel matrix_innerpanel2;
    private javax.swing.JPanel matrix_innerpanel3;
    private javax.swing.JPanel matrixsubpanel;
    public static javax.swing.JTable objList;
    private javax.swing.JPanel obj_innerpanel1;
    private javax.swing.JCheckBox operaMatriz;
    private javax.swing.JPanel painelFundo;
    public static javax.swing.JPanel painelPintura;
    private javax.swing.JCheckBox redimensionarsobreCentro;
    private javax.swing.JCheckBox redimensionarsobreOrigem;
    private javax.swing.JCheckBox refletOrigem;
    private javax.swing.JCheckBox refletX;
    private javax.swing.JCheckBox refletY;
    private javax.swing.JPanel reflet_innerpanel;
    private javax.swing.JTextArea resultMatrix;
    private javax.swing.JCheckBox rotacionaemPonto;
    private javax.swing.JCheckBox rotacionanoCentro;
    private javax.swing.JSeparator seperaPainel;
    private javax.swing.JPanel tool_inner;
    private javax.swing.JMenuBar topMenu;
    private javax.swing.JMenu topMenuArquivo;
    private javax.swing.JMenu topMenuDesenhar;
    private javax.swing.JMenu topMenuDesenhar1;
    private javax.swing.JTextField vZoom;
    private javax.swing.JPanel viewportsubpanel;
    private javax.swing.JTextField vlrAngCisalha;
    private javax.swing.JTextField vlrEscalar;
    private javax.swing.JTextField vlrMovObjX;
    private javax.swing.JTextField vlrMovObjY;
    private javax.swing.JTextField vlrRotacObj;
    private javax.swing.JTextField vlrXPontoRotacObj;
    private javax.swing.JTextField vlrYPontoRotacObj;
    private javax.swing.JTextField vlrZoomObjX;
    private javax.swing.JTextField vlrZoomObjY;
    private javax.swing.JPanel vw_innerpanel1;
    private javax.swing.JPanel vw_innerpanel2;
    // End of variables declaration//GEN-END:variables

}
